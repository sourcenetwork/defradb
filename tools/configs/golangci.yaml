# This file contains our linter configurations that will be used for all Source Inc. projects.

#==================================================================================[ Linter Analysis Running Options ]
run:
  concurrency: 8

  # timeout for analysis, example 30s, 5m.
  timeout: 5m

  # exit code when at least one issue was found.
  issues-exit-code: 1

  # include test files or not.
  tests: true

  # list of build tags, all linters use it. Default is empty list.
  build-tags:
    # - mytag

  # which dirs to skip: issues from them won't be reported;
  # can use regexp here: generated.*, regexp is applied on full path;
  # default value is empty list, but default dirs are skipped independently
  # from this option's value (see skip-dirs-use-default).
  # "/" will be replaced by current OS file path separator to properly work
  # on Windows.
  skip-dirs:
    # - net/

  # Enables skipping of directories:
  #   vendor$, third_party$, testdata$, examples$, Godeps$, builtin$
  skip-dirs-use-default: true

  # which files to skip: they will be analyzed, but issues from them
  # won't be reported. Default value is empty list, but there is
  # no need to include all autogenerated files, we confidently recognize
  # autogenerated files. If it's not please let us know.
  # "/" will be replaced by current OS file path separator to properly work
  # on Windows.
  skip-files:
    # - ".*\\.my\\.go$"
    # - lib/bad.go

  # by default isn't set. If set we pass it to "go list -mod={option}". From "go help modules":
  # If invoked with -mod=readonly, the go command is disallowed from the implicit
  # automatic updating of go.mod described above. Instead, it fails when any changes
  # to go.mod are needed. This setting is most useful to check that go.mod does
  # not need updates, such as in a continuous integration and testing system.
  # If invoked with -mod=vendor, the go command assumes that the vendor
  # directory holds the correct copies of dependencies and ignores
  # the dependency descriptions in go.mod.
  # modules-download-mode: readonly|vendor|mod
  modules-download-mode: mod

  # Allow multiple parallel golangci-lint instances running.
  # If false (default) - golangci-lint acquires file lock on start.
  allow-parallel-runners: false

  # Define the Go version limit.
  # Default: use Go version from the go.mod file, fallback on the env var `GOVERSION`.
  go: "1.22"

#=====================================================================================[ Output Configuration Options ]
output:
  # colored-line-number|line-number|json|tab|checkstyle|code-climate|junit-xml|github-actions
  format: colored-line-number

  # print lines of code with issue.
  print-issued-lines: true

  # print linter name in the end of issue text.
  print-linter-name: true

  # make issues output unique by line.
  uniq-by-line: true

  # add a prefix to the output file references.
  path-prefix: ""

  # sorts results by: filepath, line and column
  sort-results: true

#===========================================================================[ Linter Specific Severity Configuration ]
severity:
  default-severity: error

  # If set to true severity-rules regular expressions become case sensitive.
  case-sensitive: false

  # Default value is empty list.
  # When a list of severity rules are provided, severity information will be added to lint
  # issues. Severity rules have the same filtering capability as exclude rules except you
  # are allowed to specify one matcher per severity rule.
  # Only affects out formats that support setting severity information.
  # rules:
  #   - linters:
  #     - dupl
  #     severity: info

#==================================================================================================[ Enabled Linters ]
linters:
  fast: false

  presets:
    # - bugs

  enable-all: false

  disable-all: true

  enable:
    - errcheck
    - errorlint
    - forbidigo
    - goconst
    - gofmt
    - goheader
    - goimports
    - gosimple
    - govet
    - ineffassign
    - lll
    - nolintlint
    - revive
    - staticcheck
    - typecheck
    - unused
    - whitespace

#====================================================[ Tweaks To Fix Issues or Exclude linter(s) on Select Locations ]
issues:
  # List of regexps of issue texts to exclude, empty list by default.
  # But independently from this option we use default exclude patterns,
  # it can be disabled by `exclude-use-default: false`. To list all
  # excluded by default patterns execute `golangci-lint run --help`
  exclude:
  # - abcdef

  # Excluding configuration per-path, per-linter, per-text and per-source
  exclude-rules:
    # Exclude some linters from running on tests files.
    - path: "_test.go$"
      linters:
        - errcheck
        - lll
        - errorlint

    # Exclude running header check in these paths
    - path: "(net|datastore/badger/v4/compat_logger.go|datastore/badger/v4/datastore.go|connor|encoding)"
      linters:
        - goheader

  # Independently from option `exclude` we use default exclude patterns,
  # it can be disabled by this option. To list all
  # excluded by default patterns execute `golangci-lint run --help`.
  # Default value for this option is true.
  exclude-use-default: false

  # The default value is false. If set to true exclude and exclude-rules
  # regular expressions become case sensitive.
  exclude-case-sensitive: false

  # The list of ids of default excludes to include or disable. By default it's empty.
  include:
    - EXC0002 # disable excluding of issues about comments from golint

  # Maximum issues count per one linter. Set to 0 to disable. Default is 50.
  max-issues-per-linter: 0

  # Maximum count of issues with the same text. Set to 0 to disable. Default is 3.
  max-same-issues: 0

  # Show only new issues: if there are unstaged changes or untracked files,
  # only those changes are analyzed, else only changes in HEAD~ are analyzed.
  # It's a super-useful option for integration of golangci-lint into existing
  # large codebase. It's not practical to fix all existing issues at the moment
  # of integration: much better don't allow issues in new code.
  new: false

  # Don't auto-fix found issues by default (even if it's supported by the linter).
  fix: false

#==================================================================[ All Settings Of Specific Linters We Have Enabled]
linters-settings:
  errcheck:
    # report about not checking of errors in type assertions: `a := b.(MyStruct)`;
    # default is false: such cases aren't reported by default.
    check-type-assertions: false

    # report about assignment of errors to blank identifier: `num, _ := strconv.Atoi(numStr)`;
    # default is false: such cases aren't reported by default.
    check-blank: false

    # list of functions to exclude from checking, where each entry is a single function to exclude.
    # see https://github.com/kisielk/errcheck#excluding-functions for details
    exclude-functions:
      # - io/ioutil.ReadFile
      # - io.Copy(*bytes.Buffer)
      # - io.Copy(os.Stdout)

  forbidigo:
    # Forbid the following identifiers (identifiers are written using regexp):
    forbid:
      - 'fmt\.Print.*'
      - 'ioutil\.*'

    # Exclude godoc examples from forbidigo checks.
    exclude_godoc_examples: false

  goconst:
    # Minimal length of string constant.
    min-len: 2
    # Minimum occurrences of constant string count to trigger issue.
    min-occurrences: 2
    # Ignore test files.
    ignore-tests: true
    # Look for existing constants matching the values.
    match-constant: true
    # Search also for duplicated numbers.
    numbers: true
    # Minimum value, only works with goconst.numbers
    min: 2
    # Maximum value, only works with goconst.numbers
    max: 2
    # Ignore when constant is not used as function argument.
    # @todo: perhaps in the near future set this to false and resolve the warnings.
    ignore-calls: true

  gofmt:
    simplify: true

  goheader:
    values:
      const:
        # define here const type values in format k:v, for example:
        BSL: "Business Source License"
        APL: "Apache License, Version 2.0"

      regexp:
        ANY-YEAR: (20\d\d)

    template: |-
      Copyright {{ ANY-YEAR }} Democratized Data Foundation

      Use of this software is governed by the {{ BSL }}
      included in the file licenses/BSL.txt.

      As of the Change Date specified in that file, in accordance with
      the {{ BSL }}, use of this software will be governed
      by the {{ APL }}, included in the file
      licenses/APL.txt.

    template-path:
      # also as alternative of directive 'template' you may put the path to file with the template source

  goimports:
    # Put imports beginning with prefix after 3rd-party packages.
    # It's a comma-separated list of prefixes.
    local-prefixes: github.com/sourcenetwork/defradb

  gosimple:
    # Select the Go version to target.
    go: "1.22"
    # https://staticcheck.io/docs/options#checks
    checks: ["all", "-S1038"]
    # Turn on all except (these are disabled):
    # - S1038 - Unnecessarily complex way of printing formatted string. Which said
    #   instead of using fmt.Print(fmt.Sprintf(...)), one can use fmt.Printf(...).

  govet:
    # report about shadowed variables
    check-shadowing: false

    # settings per analyzer
    settings:
      printf: # analyzer name, run `go tool vet help` to see all analyzers
        funcs: # run `go tool vet help printf` to see available settings for `printf` analyzer
          - (github.com/golangci/golangci-lint/pkg/logutils.Log).Infof
          - (github.com/golangci/golangci-lint/pkg/logutils.Log).Warnf
          - (github.com/golangci/golangci-lint/pkg/logutils.Log).Errorf
          - (github.com/golangci/golangci-lint/pkg/logutils.Log).Fatalf

    # enable or disable analyzers by name
    # run `go tool vet help` to see all analyzers
    enable:
      - atomicalign
      - nilness

    enable-all: false

    disable:
      - shadow

    disable-all: false

  lll:
    # max line length, lines longer will be reported.
    # '\t' is counted as 1 character.
    line-length: 120
    # tab width in spaces.
    tab-width: 1

  nolintlint:
    # Disable to ensure that all nolint directives actually have an effect.
    allow-unused: false
    # Disable to ensure that nolint directives don't have a leading space.
    allow-leading-space: false
    # Exclude following linters from requiring an explanation.
    allow-no-explanation: []
    # Enable to require an explanation of nonzero length after each nolint directive.
    require-explanation: false
    # Enable to require nolint directives to mention the specific linter being suppressed.
    require-specific: true

  revive:
    # see https://github.com/mgechev/revive#available-rules for details.
    ignore-generated-header: true
    severity: warning
    rules:
      - name: superfluous-else
        severity: error
      - name: use-any
        severity: error
      - name: error-strings
        severity: error
      - name: string-format
        severity: error
        arguments:
          - - 'errors.New'
            - '/^([^A-Z]|$)/'
            - must not start with a capital letter
          - - 'errors.New'
            - '/(^|[^\.!?])$/'
            - must not end in punctuation
          - - 'fmt.Errorf'
            - '/^([^A-Z]|$)/'
            - must not start with a capital letter
          - - 'fmt.Errorf'
            - '/(^|[^\.!?])$/'
            - must not end in punctuation
          - - 'errors.Wrap'
            - '/^([^A-Z]|$)/'
            - must not start with a capital letter
          - - 'errors.Wrap'
            - '/(^|[^\.!?])$/'
            - must not end in punctuation
          - - 'errors.WithStack'
            - '/^([^A-Z]|$)/'
            - must not start with a capital letter
          - - 'errors.WithStack'
            - '/(^|[^\.!?])$/'
            - must not end in punctuation

  staticcheck:
    # Select the Go version to target.
    go: "1.22"
    # https://staticcheck.io/docs/options#checks
    checks: ["all"]

  unused:
    # Select the Go version to target.
    go: "1.22"

  whitespace:
    # Enforces newlines (or comments) after every multi-line if statement.
    multi-if: false
    # Enforces newlines (or comments) after every multi-line function signature.
    multi-func: false

  # The custom section can be used to define linter plugins to be loaded at runtime.
  # See README doc for more info.
  custom:
    # Each custom linter should have a unique name.
    example:
      # The path to the plugin *.so. Can be absolute or local. Required for each custom linter
      # path: /path/to/example.so
      # The description of the linter. Optional, just for documentation purposes.
      # description: This is an example usage of a plugin linter.
      # Intended to point to the repo location of the linter. Optional, just for documentation purposes.
      # original-url: github.com/golangci/example-linter
