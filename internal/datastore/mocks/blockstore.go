// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/ipfs/go-block-format"
	"github.com/ipfs/go-cid"
	"github.com/sourcenetwork/defradb/internal/datastore"
	mock "github.com/stretchr/testify/mock"
)

// NewBlockstore creates a new instance of Blockstore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBlockstore(t interface {
	mock.TestingT
	Cleanup(func())
}) *Blockstore {
	mock := &Blockstore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Blockstore is an autogenerated mock type for the Blockstore type
type Blockstore struct {
	mock.Mock
}

type Blockstore_Expecter struct {
	mock *mock.Mock
}

func (_m *Blockstore) EXPECT() *Blockstore_Expecter {
	return &Blockstore_Expecter{mock: &_m.Mock}
}

// AllKeysChan provides a mock function for the type Blockstore
func (_mock *Blockstore) AllKeysChan(ctx context.Context) (<-chan cid.Cid, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for AllKeysChan")
	}

	var r0 <-chan cid.Cid
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (<-chan cid.Cid, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) <-chan cid.Cid); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan cid.Cid)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Blockstore_AllKeysChan_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AllKeysChan'
type Blockstore_AllKeysChan_Call struct {
	*mock.Call
}

// AllKeysChan is a helper method to define mock.On call
//   - ctx
func (_e *Blockstore_Expecter) AllKeysChan(ctx interface{}) *Blockstore_AllKeysChan_Call {
	return &Blockstore_AllKeysChan_Call{Call: _e.mock.On("AllKeysChan", ctx)}
}

func (_c *Blockstore_AllKeysChan_Call) Run(run func(ctx context.Context)) *Blockstore_AllKeysChan_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Blockstore_AllKeysChan_Call) Return(cidCh <-chan cid.Cid, err error) *Blockstore_AllKeysChan_Call {
	_c.Call.Return(cidCh, err)
	return _c
}

func (_c *Blockstore_AllKeysChan_Call) RunAndReturn(run func(ctx context.Context) (<-chan cid.Cid, error)) *Blockstore_AllKeysChan_Call {
	_c.Call.Return(run)
	return _c
}

// AsIPLDStorage provides a mock function for the type Blockstore
func (_mock *Blockstore) AsIPLDStorage() datastore.IPLDStorage {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for AsIPLDStorage")
	}

	var r0 datastore.IPLDStorage
	if returnFunc, ok := ret.Get(0).(func() datastore.IPLDStorage); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(datastore.IPLDStorage)
		}
	}
	return r0
}

// Blockstore_AsIPLDStorage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AsIPLDStorage'
type Blockstore_AsIPLDStorage_Call struct {
	*mock.Call
}

// AsIPLDStorage is a helper method to define mock.On call
func (_e *Blockstore_Expecter) AsIPLDStorage() *Blockstore_AsIPLDStorage_Call {
	return &Blockstore_AsIPLDStorage_Call{Call: _e.mock.On("AsIPLDStorage")}
}

func (_c *Blockstore_AsIPLDStorage_Call) Run(run func()) *Blockstore_AsIPLDStorage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Blockstore_AsIPLDStorage_Call) Return(iPLDStorage datastore.IPLDStorage) *Blockstore_AsIPLDStorage_Call {
	_c.Call.Return(iPLDStorage)
	return _c
}

func (_c *Blockstore_AsIPLDStorage_Call) RunAndReturn(run func() datastore.IPLDStorage) *Blockstore_AsIPLDStorage_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteBlock provides a mock function for the type Blockstore
func (_mock *Blockstore) DeleteBlock(context1 context.Context, cid1 cid.Cid) error {
	ret := _mock.Called(context1, cid1)

	if len(ret) == 0 {
		panic("no return value specified for DeleteBlock")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, cid.Cid) error); ok {
		r0 = returnFunc(context1, cid1)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Blockstore_DeleteBlock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteBlock'
type Blockstore_DeleteBlock_Call struct {
	*mock.Call
}

// DeleteBlock is a helper method to define mock.On call
//   - context1
//   - cid1
func (_e *Blockstore_Expecter) DeleteBlock(context1 interface{}, cid1 interface{}) *Blockstore_DeleteBlock_Call {
	return &Blockstore_DeleteBlock_Call{Call: _e.mock.On("DeleteBlock", context1, cid1)}
}

func (_c *Blockstore_DeleteBlock_Call) Run(run func(context1 context.Context, cid1 cid.Cid)) *Blockstore_DeleteBlock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(cid.Cid))
	})
	return _c
}

func (_c *Blockstore_DeleteBlock_Call) Return(err error) *Blockstore_DeleteBlock_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Blockstore_DeleteBlock_Call) RunAndReturn(run func(context1 context.Context, cid1 cid.Cid) error) *Blockstore_DeleteBlock_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function for the type Blockstore
func (_mock *Blockstore) Get(context1 context.Context, cid1 cid.Cid) (blocks.Block, error) {
	ret := _mock.Called(context1, cid1)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 blocks.Block
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, cid.Cid) (blocks.Block, error)); ok {
		return returnFunc(context1, cid1)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, cid.Cid) blocks.Block); ok {
		r0 = returnFunc(context1, cid1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(blocks.Block)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, cid.Cid) error); ok {
		r1 = returnFunc(context1, cid1)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Blockstore_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type Blockstore_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - context1
//   - cid1
func (_e *Blockstore_Expecter) Get(context1 interface{}, cid1 interface{}) *Blockstore_Get_Call {
	return &Blockstore_Get_Call{Call: _e.mock.On("Get", context1, cid1)}
}

func (_c *Blockstore_Get_Call) Run(run func(context1 context.Context, cid1 cid.Cid)) *Blockstore_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(cid.Cid))
	})
	return _c
}

func (_c *Blockstore_Get_Call) Return(block blocks.Block, err error) *Blockstore_Get_Call {
	_c.Call.Return(block, err)
	return _c
}

func (_c *Blockstore_Get_Call) RunAndReturn(run func(context1 context.Context, cid1 cid.Cid) (blocks.Block, error)) *Blockstore_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetSize provides a mock function for the type Blockstore
func (_mock *Blockstore) GetSize(context1 context.Context, cid1 cid.Cid) (int, error) {
	ret := _mock.Called(context1, cid1)

	if len(ret) == 0 {
		panic("no return value specified for GetSize")
	}

	var r0 int
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, cid.Cid) (int, error)); ok {
		return returnFunc(context1, cid1)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, cid.Cid) int); ok {
		r0 = returnFunc(context1, cid1)
	} else {
		r0 = ret.Get(0).(int)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, cid.Cid) error); ok {
		r1 = returnFunc(context1, cid1)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Blockstore_GetSize_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSize'
type Blockstore_GetSize_Call struct {
	*mock.Call
}

// GetSize is a helper method to define mock.On call
//   - context1
//   - cid1
func (_e *Blockstore_Expecter) GetSize(context1 interface{}, cid1 interface{}) *Blockstore_GetSize_Call {
	return &Blockstore_GetSize_Call{Call: _e.mock.On("GetSize", context1, cid1)}
}

func (_c *Blockstore_GetSize_Call) Run(run func(context1 context.Context, cid1 cid.Cid)) *Blockstore_GetSize_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(cid.Cid))
	})
	return _c
}

func (_c *Blockstore_GetSize_Call) Return(n int, err error) *Blockstore_GetSize_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *Blockstore_GetSize_Call) RunAndReturn(run func(context1 context.Context, cid1 cid.Cid) (int, error)) *Blockstore_GetSize_Call {
	_c.Call.Return(run)
	return _c
}

// Has provides a mock function for the type Blockstore
func (_mock *Blockstore) Has(context1 context.Context, cid1 cid.Cid) (bool, error) {
	ret := _mock.Called(context1, cid1)

	if len(ret) == 0 {
		panic("no return value specified for Has")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, cid.Cid) (bool, error)); ok {
		return returnFunc(context1, cid1)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, cid.Cid) bool); ok {
		r0 = returnFunc(context1, cid1)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, cid.Cid) error); ok {
		r1 = returnFunc(context1, cid1)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Blockstore_Has_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Has'
type Blockstore_Has_Call struct {
	*mock.Call
}

// Has is a helper method to define mock.On call
//   - context1
//   - cid1
func (_e *Blockstore_Expecter) Has(context1 interface{}, cid1 interface{}) *Blockstore_Has_Call {
	return &Blockstore_Has_Call{Call: _e.mock.On("Has", context1, cid1)}
}

func (_c *Blockstore_Has_Call) Run(run func(context1 context.Context, cid1 cid.Cid)) *Blockstore_Has_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(cid.Cid))
	})
	return _c
}

func (_c *Blockstore_Has_Call) Return(b bool, err error) *Blockstore_Has_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *Blockstore_Has_Call) RunAndReturn(run func(context1 context.Context, cid1 cid.Cid) (bool, error)) *Blockstore_Has_Call {
	_c.Call.Return(run)
	return _c
}

// HashOnRead provides a mock function for the type Blockstore
func (_mock *Blockstore) HashOnRead(enabled bool) {
	_mock.Called(enabled)
	return
}

// Blockstore_HashOnRead_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HashOnRead'
type Blockstore_HashOnRead_Call struct {
	*mock.Call
}

// HashOnRead is a helper method to define mock.On call
//   - enabled
func (_e *Blockstore_Expecter) HashOnRead(enabled interface{}) *Blockstore_HashOnRead_Call {
	return &Blockstore_HashOnRead_Call{Call: _e.mock.On("HashOnRead", enabled)}
}

func (_c *Blockstore_HashOnRead_Call) Run(run func(enabled bool)) *Blockstore_HashOnRead_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(bool))
	})
	return _c
}

func (_c *Blockstore_HashOnRead_Call) Return() *Blockstore_HashOnRead_Call {
	_c.Call.Return()
	return _c
}

func (_c *Blockstore_HashOnRead_Call) RunAndReturn(run func(enabled bool)) *Blockstore_HashOnRead_Call {
	_c.Run(run)
	return _c
}

// Put provides a mock function for the type Blockstore
func (_mock *Blockstore) Put(context1 context.Context, block blocks.Block) error {
	ret := _mock.Called(context1, block)

	if len(ret) == 0 {
		panic("no return value specified for Put")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, blocks.Block) error); ok {
		r0 = returnFunc(context1, block)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Blockstore_Put_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Put'
type Blockstore_Put_Call struct {
	*mock.Call
}

// Put is a helper method to define mock.On call
//   - context1
//   - block
func (_e *Blockstore_Expecter) Put(context1 interface{}, block interface{}) *Blockstore_Put_Call {
	return &Blockstore_Put_Call{Call: _e.mock.On("Put", context1, block)}
}

func (_c *Blockstore_Put_Call) Run(run func(context1 context.Context, block blocks.Block)) *Blockstore_Put_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(blocks.Block))
	})
	return _c
}

func (_c *Blockstore_Put_Call) Return(err error) *Blockstore_Put_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Blockstore_Put_Call) RunAndReturn(run func(context1 context.Context, block blocks.Block) error) *Blockstore_Put_Call {
	_c.Call.Return(run)
	return _c
}

// PutMany provides a mock function for the type Blockstore
func (_mock *Blockstore) PutMany(context1 context.Context, blocks1 []blocks.Block) error {
	ret := _mock.Called(context1, blocks1)

	if len(ret) == 0 {
		panic("no return value specified for PutMany")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []blocks.Block) error); ok {
		r0 = returnFunc(context1, blocks1)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Blockstore_PutMany_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutMany'
type Blockstore_PutMany_Call struct {
	*mock.Call
}

// PutMany is a helper method to define mock.On call
//   - context1
//   - blocks1
func (_e *Blockstore_Expecter) PutMany(context1 interface{}, blocks1 interface{}) *Blockstore_PutMany_Call {
	return &Blockstore_PutMany_Call{Call: _e.mock.On("PutMany", context1, blocks1)}
}

func (_c *Blockstore_PutMany_Call) Run(run func(context1 context.Context, blocks1 []blocks.Block)) *Blockstore_PutMany_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]blocks.Block))
	})
	return _c
}

func (_c *Blockstore_PutMany_Call) Return(err error) *Blockstore_PutMany_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Blockstore_PutMany_Call) RunAndReturn(run func(context1 context.Context, blocks1 []blocks.Block) error) *Blockstore_PutMany_Call {
	_c.Call.Return(run)
	return _c
}
