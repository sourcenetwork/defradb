// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/sourcenetwork/corekv"
	mock "github.com/stretchr/testify/mock"
)

// NewTxn creates a new instance of Txn. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTxn(t interface {
	mock.TestingT
	Cleanup(func())
}) *Txn {
	mock := &Txn{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Txn is an autogenerated mock type for the Txn type
type Txn struct {
	mock.Mock
}

type Txn_Expecter struct {
	mock *mock.Mock
}

func (_m *Txn) EXPECT() *Txn_Expecter {
	return &Txn_Expecter{mock: &_m.Mock}
}

// Commit provides a mock function for the type Txn
func (_mock *Txn) Commit(ctx context.Context) error {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Commit")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Txn_Commit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Commit'
type Txn_Commit_Call struct {
	*mock.Call
}

// Commit is a helper method to define mock.On call
//   - ctx
func (_e *Txn_Expecter) Commit(ctx interface{}) *Txn_Commit_Call {
	return &Txn_Commit_Call{Call: _e.mock.On("Commit", ctx)}
}

func (_c *Txn_Commit_Call) Run(run func(ctx context.Context)) *Txn_Commit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Txn_Commit_Call) Return(err error) *Txn_Commit_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Txn_Commit_Call) RunAndReturn(run func(ctx context.Context) error) *Txn_Commit_Call {
	_c.Call.Return(run)
	return _c
}

// Discard provides a mock function for the type Txn
func (_mock *Txn) Discard(ctx context.Context) {
	_mock.Called(ctx)
	return
}

// Txn_Discard_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Discard'
type Txn_Discard_Call struct {
	*mock.Call
}

// Discard is a helper method to define mock.On call
//   - ctx
func (_e *Txn_Expecter) Discard(ctx interface{}) *Txn_Discard_Call {
	return &Txn_Discard_Call{Call: _e.mock.On("Discard", ctx)}
}

func (_c *Txn_Discard_Call) Run(run func(ctx context.Context)) *Txn_Discard_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Txn_Discard_Call) Return() *Txn_Discard_Call {
	_c.Call.Return()
	return _c
}

func (_c *Txn_Discard_Call) RunAndReturn(run func(ctx context.Context)) *Txn_Discard_Call {
	_c.Run(run)
	return _c
}

// ID provides a mock function for the type Txn
func (_mock *Txn) ID() uint64 {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for ID")
	}

	var r0 uint64
	if returnFunc, ok := ret.Get(0).(func() uint64); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(uint64)
	}
	return r0
}

// Txn_ID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ID'
type Txn_ID_Call struct {
	*mock.Call
}

// ID is a helper method to define mock.On call
func (_e *Txn_Expecter) ID() *Txn_ID_Call {
	return &Txn_ID_Call{Call: _e.mock.On("ID")}
}

func (_c *Txn_ID_Call) Run(run func()) *Txn_ID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Txn_ID_Call) Return(v uint64) *Txn_ID_Call {
	_c.Call.Return(v)
	return _c
}

func (_c *Txn_ID_Call) RunAndReturn(run func() uint64) *Txn_ID_Call {
	_c.Call.Return(run)
	return _c
}

// OnDiscard provides a mock function for the type Txn
func (_mock *Txn) OnDiscard(fn func()) {
	_mock.Called(fn)
	return
}

// Txn_OnDiscard_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnDiscard'
type Txn_OnDiscard_Call struct {
	*mock.Call
}

// OnDiscard is a helper method to define mock.On call
//   - fn
func (_e *Txn_Expecter) OnDiscard(fn interface{}) *Txn_OnDiscard_Call {
	return &Txn_OnDiscard_Call{Call: _e.mock.On("OnDiscard", fn)}
}

func (_c *Txn_OnDiscard_Call) Run(run func(fn func())) *Txn_OnDiscard_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func()))
	})
	return _c
}

func (_c *Txn_OnDiscard_Call) Return() *Txn_OnDiscard_Call {
	_c.Call.Return()
	return _c
}

func (_c *Txn_OnDiscard_Call) RunAndReturn(run func(fn func())) *Txn_OnDiscard_Call {
	_c.Run(run)
	return _c
}

// OnDiscardAsync provides a mock function for the type Txn
func (_mock *Txn) OnDiscardAsync(fn func()) {
	_mock.Called(fn)
	return
}

// Txn_OnDiscardAsync_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnDiscardAsync'
type Txn_OnDiscardAsync_Call struct {
	*mock.Call
}

// OnDiscardAsync is a helper method to define mock.On call
//   - fn
func (_e *Txn_Expecter) OnDiscardAsync(fn interface{}) *Txn_OnDiscardAsync_Call {
	return &Txn_OnDiscardAsync_Call{Call: _e.mock.On("OnDiscardAsync", fn)}
}

func (_c *Txn_OnDiscardAsync_Call) Run(run func(fn func())) *Txn_OnDiscardAsync_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func()))
	})
	return _c
}

func (_c *Txn_OnDiscardAsync_Call) Return() *Txn_OnDiscardAsync_Call {
	_c.Call.Return()
	return _c
}

func (_c *Txn_OnDiscardAsync_Call) RunAndReturn(run func(fn func())) *Txn_OnDiscardAsync_Call {
	_c.Run(run)
	return _c
}

// OnError provides a mock function for the type Txn
func (_mock *Txn) OnError(fn func()) {
	_mock.Called(fn)
	return
}

// Txn_OnError_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnError'
type Txn_OnError_Call struct {
	*mock.Call
}

// OnError is a helper method to define mock.On call
//   - fn
func (_e *Txn_Expecter) OnError(fn interface{}) *Txn_OnError_Call {
	return &Txn_OnError_Call{Call: _e.mock.On("OnError", fn)}
}

func (_c *Txn_OnError_Call) Run(run func(fn func())) *Txn_OnError_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func()))
	})
	return _c
}

func (_c *Txn_OnError_Call) Return() *Txn_OnError_Call {
	_c.Call.Return()
	return _c
}

func (_c *Txn_OnError_Call) RunAndReturn(run func(fn func())) *Txn_OnError_Call {
	_c.Run(run)
	return _c
}

// OnErrorAsync provides a mock function for the type Txn
func (_mock *Txn) OnErrorAsync(fn func()) {
	_mock.Called(fn)
	return
}

// Txn_OnErrorAsync_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnErrorAsync'
type Txn_OnErrorAsync_Call struct {
	*mock.Call
}

// OnErrorAsync is a helper method to define mock.On call
//   - fn
func (_e *Txn_Expecter) OnErrorAsync(fn interface{}) *Txn_OnErrorAsync_Call {
	return &Txn_OnErrorAsync_Call{Call: _e.mock.On("OnErrorAsync", fn)}
}

func (_c *Txn_OnErrorAsync_Call) Run(run func(fn func())) *Txn_OnErrorAsync_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func()))
	})
	return _c
}

func (_c *Txn_OnErrorAsync_Call) Return() *Txn_OnErrorAsync_Call {
	_c.Call.Return()
	return _c
}

func (_c *Txn_OnErrorAsync_Call) RunAndReturn(run func(fn func())) *Txn_OnErrorAsync_Call {
	_c.Run(run)
	return _c
}

// OnSuccess provides a mock function for the type Txn
func (_mock *Txn) OnSuccess(fn func()) {
	_mock.Called(fn)
	return
}

// Txn_OnSuccess_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnSuccess'
type Txn_OnSuccess_Call struct {
	*mock.Call
}

// OnSuccess is a helper method to define mock.On call
//   - fn
func (_e *Txn_Expecter) OnSuccess(fn interface{}) *Txn_OnSuccess_Call {
	return &Txn_OnSuccess_Call{Call: _e.mock.On("OnSuccess", fn)}
}

func (_c *Txn_OnSuccess_Call) Run(run func(fn func())) *Txn_OnSuccess_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func()))
	})
	return _c
}

func (_c *Txn_OnSuccess_Call) Return() *Txn_OnSuccess_Call {
	_c.Call.Return()
	return _c
}

func (_c *Txn_OnSuccess_Call) RunAndReturn(run func(fn func())) *Txn_OnSuccess_Call {
	_c.Run(run)
	return _c
}

// OnSuccessAsync provides a mock function for the type Txn
func (_mock *Txn) OnSuccessAsync(fn func()) {
	_mock.Called(fn)
	return
}

// Txn_OnSuccessAsync_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnSuccessAsync'
type Txn_OnSuccessAsync_Call struct {
	*mock.Call
}

// OnSuccessAsync is a helper method to define mock.On call
//   - fn
func (_e *Txn_Expecter) OnSuccessAsync(fn interface{}) *Txn_OnSuccessAsync_Call {
	return &Txn_OnSuccessAsync_Call{Call: _e.mock.On("OnSuccessAsync", fn)}
}

func (_c *Txn_OnSuccessAsync_Call) Run(run func(fn func())) *Txn_OnSuccessAsync_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func()))
	})
	return _c
}

func (_c *Txn_OnSuccessAsync_Call) Return() *Txn_OnSuccessAsync_Call {
	_c.Call.Return()
	return _c
}

func (_c *Txn_OnSuccessAsync_Call) RunAndReturn(run func(fn func())) *Txn_OnSuccessAsync_Call {
	_c.Run(run)
	return _c
}

// Store provides a mock function for the type Txn
func (_mock *Txn) Store() corekv.Store {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Store")
	}

	var r0 corekv.Store
	if returnFunc, ok := ret.Get(0).(func() corekv.Store); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(corekv.Store)
		}
	}
	return r0
}

// Txn_Store_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Store'
type Txn_Store_Call struct {
	*mock.Call
}

// Store is a helper method to define mock.On call
func (_e *Txn_Expecter) Store() *Txn_Store_Call {
	return &Txn_Store_Call{Call: _e.mock.On("Store")}
}

func (_c *Txn_Store_Call) Run(run func()) *Txn_Store_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Txn_Store_Call) Return(store corekv.Store) *Txn_Store_Call {
	_c.Call.Return(store)
	return _c
}

func (_c *Txn_Store_Call) RunAndReturn(run func() corekv.Store) *Txn_Store_Call {
	_c.Call.Return(run)
	return _c
}
