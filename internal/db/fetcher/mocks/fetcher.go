// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/sourcenetwork/defradb/acp/dac"
	"github.com/sourcenetwork/defradb/acp/identity"
	"github.com/sourcenetwork/defradb/client"
	"github.com/sourcenetwork/defradb/internal/core"
	"github.com/sourcenetwork/defradb/internal/datastore"
	"github.com/sourcenetwork/defradb/internal/db/fetcher"
	"github.com/sourcenetwork/defradb/internal/keys"
	"github.com/sourcenetwork/defradb/internal/planner/mapper"
	"github.com/sourcenetwork/immutable"
	mock "github.com/stretchr/testify/mock"
)

// NewFetcher creates a new instance of Fetcher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFetcher(t interface {
	mock.TestingT
	Cleanup(func())
}) *Fetcher {
	mock := &Fetcher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Fetcher is an autogenerated mock type for the Fetcher type
type Fetcher struct {
	mock.Mock
}

type Fetcher_Expecter struct {
	mock *mock.Mock
}

func (_m *Fetcher) EXPECT() *Fetcher_Expecter {
	return &Fetcher_Expecter{mock: &_m.Mock}
}

// Close provides a mock function for the type Fetcher
func (_mock *Fetcher) Close() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Fetcher_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type Fetcher_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *Fetcher_Expecter) Close() *Fetcher_Close_Call {
	return &Fetcher_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *Fetcher_Close_Call) Run(run func()) *Fetcher_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Fetcher_Close_Call) Return(err error) *Fetcher_Close_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Fetcher_Close_Call) RunAndReturn(run func() error) *Fetcher_Close_Call {
	_c.Call.Return(run)
	return _c
}

// FetchNext provides a mock function for the type Fetcher
func (_mock *Fetcher) FetchNext(ctx context.Context) (fetcher.EncodedDocument, fetcher.ExecInfo, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for FetchNext")
	}

	var r0 fetcher.EncodedDocument
	var r1 fetcher.ExecInfo
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (fetcher.EncodedDocument, fetcher.ExecInfo, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) fetcher.EncodedDocument); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(fetcher.EncodedDocument)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) fetcher.ExecInfo); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Get(1).(fetcher.ExecInfo)
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context) error); ok {
		r2 = returnFunc(ctx)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// Fetcher_FetchNext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FetchNext'
type Fetcher_FetchNext_Call struct {
	*mock.Call
}

// FetchNext is a helper method to define mock.On call
//   - ctx
func (_e *Fetcher_Expecter) FetchNext(ctx interface{}) *Fetcher_FetchNext_Call {
	return &Fetcher_FetchNext_Call{Call: _e.mock.On("FetchNext", ctx)}
}

func (_c *Fetcher_FetchNext_Call) Run(run func(ctx context.Context)) *Fetcher_FetchNext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Fetcher_FetchNext_Call) Return(encodedDocument fetcher.EncodedDocument, execInfo fetcher.ExecInfo, err error) *Fetcher_FetchNext_Call {
	_c.Call.Return(encodedDocument, execInfo, err)
	return _c
}

func (_c *Fetcher_FetchNext_Call) RunAndReturn(run func(ctx context.Context) (fetcher.EncodedDocument, fetcher.ExecInfo, error)) *Fetcher_FetchNext_Call {
	_c.Call.Return(run)
	return _c
}

// Init provides a mock function for the type Fetcher
func (_mock *Fetcher) Init(ctx context.Context, identity1 immutable.Option[identity.Identity], txn datastore.Txn, documentACP immutable.Option[dac.DocumentACP], index immutable.Option[client.IndexDescription], col client.Collection, fields []client.FieldDefinition, filter *mapper.Filter, ordering []mapper.OrderCondition, docmapper *core.DocumentMapping, showDeleted bool) error {
	ret := _mock.Called(ctx, identity1, txn, documentACP, index, col, fields, filter, ordering, docmapper, showDeleted)

	if len(ret) == 0 {
		panic("no return value specified for Init")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, immutable.Option[identity.Identity], datastore.Txn, immutable.Option[dac.DocumentACP], immutable.Option[client.IndexDescription], client.Collection, []client.FieldDefinition, *mapper.Filter, []mapper.OrderCondition, *core.DocumentMapping, bool) error); ok {
		r0 = returnFunc(ctx, identity1, txn, documentACP, index, col, fields, filter, ordering, docmapper, showDeleted)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Fetcher_Init_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Init'
type Fetcher_Init_Call struct {
	*mock.Call
}

// Init is a helper method to define mock.On call
//   - ctx
//   - identity1
//   - txn
//   - documentACP
//   - index
//   - col
//   - fields
//   - filter
//   - ordering
//   - docmapper
//   - showDeleted
func (_e *Fetcher_Expecter) Init(ctx interface{}, identity1 interface{}, txn interface{}, documentACP interface{}, index interface{}, col interface{}, fields interface{}, filter interface{}, ordering interface{}, docmapper interface{}, showDeleted interface{}) *Fetcher_Init_Call {
	return &Fetcher_Init_Call{Call: _e.mock.On("Init", ctx, identity1, txn, documentACP, index, col, fields, filter, ordering, docmapper, showDeleted)}
}

func (_c *Fetcher_Init_Call) Run(run func(ctx context.Context, identity1 immutable.Option[identity.Identity], txn datastore.Txn, documentACP immutable.Option[dac.DocumentACP], index immutable.Option[client.IndexDescription], col client.Collection, fields []client.FieldDefinition, filter *mapper.Filter, ordering []mapper.OrderCondition, docmapper *core.DocumentMapping, showDeleted bool)) *Fetcher_Init_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(immutable.Option[identity.Identity]), args[2].(datastore.Txn), args[3].(immutable.Option[dac.DocumentACP]), args[4].(immutable.Option[client.IndexDescription]), args[5].(client.Collection), args[6].([]client.FieldDefinition), args[7].(*mapper.Filter), args[8].([]mapper.OrderCondition), args[9].(*core.DocumentMapping), args[10].(bool))
	})
	return _c
}

func (_c *Fetcher_Init_Call) Return(err error) *Fetcher_Init_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Fetcher_Init_Call) RunAndReturn(run func(ctx context.Context, identity1 immutable.Option[identity.Identity], txn datastore.Txn, documentACP immutable.Option[dac.DocumentACP], index immutable.Option[client.IndexDescription], col client.Collection, fields []client.FieldDefinition, filter *mapper.Filter, ordering []mapper.OrderCondition, docmapper *core.DocumentMapping, showDeleted bool) error) *Fetcher_Init_Call {
	_c.Call.Return(run)
	return _c
}

// Start provides a mock function for the type Fetcher
func (_mock *Fetcher) Start(ctx context.Context, prefixes ...keys.Walkable) error {
	var tmpRet mock.Arguments
	if len(prefixes) > 0 {
		tmpRet = _mock.Called(ctx, prefixes)
	} else {
		tmpRet = _mock.Called(ctx)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for Start")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...keys.Walkable) error); ok {
		r0 = returnFunc(ctx, prefixes...)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Fetcher_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type Fetcher_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
//   - ctx
//   - prefixes
func (_e *Fetcher_Expecter) Start(ctx interface{}, prefixes ...interface{}) *Fetcher_Start_Call {
	return &Fetcher_Start_Call{Call: _e.mock.On("Start",
		append([]interface{}{ctx}, prefixes...)...)}
}

func (_c *Fetcher_Start_Call) Run(run func(ctx context.Context, prefixes ...keys.Walkable)) *Fetcher_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[1].([]keys.Walkable)
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *Fetcher_Start_Call) Return(err error) *Fetcher_Start_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Fetcher_Start_Call) RunAndReturn(run func(ctx context.Context, prefixes ...keys.Walkable) error) *Fetcher_Start_Call {
	_c.Call.Return(run)
	return _c
}
