// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/sourcenetwork/corekv"
	mock "github.com/stretchr/testify/mock"
)

// NewDSReaderWriter creates a new instance of DSReaderWriter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDSReaderWriter(t interface {
	mock.TestingT
	Cleanup(func())
}) *DSReaderWriter {
	mock := &DSReaderWriter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// DSReaderWriter is an autogenerated mock type for the DSReaderWriter type
type DSReaderWriter struct {
	mock.Mock
}

type DSReaderWriter_Expecter struct {
	mock *mock.Mock
}

func (_m *DSReaderWriter) EXPECT() *DSReaderWriter_Expecter {
	return &DSReaderWriter_Expecter{mock: &_m.Mock}
}

// Delete provides a mock function for the type DSReaderWriter
func (_mock *DSReaderWriter) Delete(ctx context.Context, key []byte) error {
	ret := _mock.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []byte) error); ok {
		r0 = returnFunc(ctx, key)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// DSReaderWriter_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type DSReaderWriter_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx
//   - key
func (_e *DSReaderWriter_Expecter) Delete(ctx interface{}, key interface{}) *DSReaderWriter_Delete_Call {
	return &DSReaderWriter_Delete_Call{Call: _e.mock.On("Delete", ctx, key)}
}

func (_c *DSReaderWriter_Delete_Call) Run(run func(ctx context.Context, key []byte)) *DSReaderWriter_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]byte))
	})
	return _c
}

func (_c *DSReaderWriter_Delete_Call) Return(err error) *DSReaderWriter_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *DSReaderWriter_Delete_Call) RunAndReturn(run func(ctx context.Context, key []byte) error) *DSReaderWriter_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function for the type DSReaderWriter
func (_mock *DSReaderWriter) Get(ctx context.Context, key []byte) ([]byte, error) {
	ret := _mock.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 []byte
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []byte) ([]byte, error)); ok {
		return returnFunc(ctx, key)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, []byte) []byte); ok {
		r0 = returnFunc(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, []byte) error); ok {
		r1 = returnFunc(ctx, key)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// DSReaderWriter_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type DSReaderWriter_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx
//   - key
func (_e *DSReaderWriter_Expecter) Get(ctx interface{}, key interface{}) *DSReaderWriter_Get_Call {
	return &DSReaderWriter_Get_Call{Call: _e.mock.On("Get", ctx, key)}
}

func (_c *DSReaderWriter_Get_Call) Run(run func(ctx context.Context, key []byte)) *DSReaderWriter_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]byte))
	})
	return _c
}

func (_c *DSReaderWriter_Get_Call) Return(bytes []byte, err error) *DSReaderWriter_Get_Call {
	_c.Call.Return(bytes, err)
	return _c
}

func (_c *DSReaderWriter_Get_Call) RunAndReturn(run func(ctx context.Context, key []byte) ([]byte, error)) *DSReaderWriter_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Has provides a mock function for the type DSReaderWriter
func (_mock *DSReaderWriter) Has(ctx context.Context, key []byte) (bool, error) {
	ret := _mock.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for Has")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []byte) (bool, error)); ok {
		return returnFunc(ctx, key)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, []byte) bool); ok {
		r0 = returnFunc(ctx, key)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, []byte) error); ok {
		r1 = returnFunc(ctx, key)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// DSReaderWriter_Has_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Has'
type DSReaderWriter_Has_Call struct {
	*mock.Call
}

// Has is a helper method to define mock.On call
//   - ctx
//   - key
func (_e *DSReaderWriter_Expecter) Has(ctx interface{}, key interface{}) *DSReaderWriter_Has_Call {
	return &DSReaderWriter_Has_Call{Call: _e.mock.On("Has", ctx, key)}
}

func (_c *DSReaderWriter_Has_Call) Run(run func(ctx context.Context, key []byte)) *DSReaderWriter_Has_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]byte))
	})
	return _c
}

func (_c *DSReaderWriter_Has_Call) Return(b bool, err error) *DSReaderWriter_Has_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *DSReaderWriter_Has_Call) RunAndReturn(run func(ctx context.Context, key []byte) (bool, error)) *DSReaderWriter_Has_Call {
	_c.Call.Return(run)
	return _c
}

// Iterator provides a mock function for the type DSReaderWriter
func (_mock *DSReaderWriter) Iterator(ctx context.Context, opts corekv.IterOptions) (corekv.Iterator, error) {
	ret := _mock.Called(ctx, opts)

	if len(ret) == 0 {
		panic("no return value specified for Iterator")
	}

	var r0 corekv.Iterator
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, corekv.IterOptions) (corekv.Iterator, error)); ok {
		return returnFunc(ctx, opts)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, corekv.IterOptions) corekv.Iterator); ok {
		r0 = returnFunc(ctx, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(corekv.Iterator)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, corekv.IterOptions) error); ok {
		r1 = returnFunc(ctx, opts)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// DSReaderWriter_Iterator_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Iterator'
type DSReaderWriter_Iterator_Call struct {
	*mock.Call
}

// Iterator is a helper method to define mock.On call
//   - ctx
//   - opts
func (_e *DSReaderWriter_Expecter) Iterator(ctx interface{}, opts interface{}) *DSReaderWriter_Iterator_Call {
	return &DSReaderWriter_Iterator_Call{Call: _e.mock.On("Iterator", ctx, opts)}
}

func (_c *DSReaderWriter_Iterator_Call) Run(run func(ctx context.Context, opts corekv.IterOptions)) *DSReaderWriter_Iterator_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(corekv.IterOptions))
	})
	return _c
}

func (_c *DSReaderWriter_Iterator_Call) Return(iterator corekv.Iterator, err error) *DSReaderWriter_Iterator_Call {
	_c.Call.Return(iterator, err)
	return _c
}

func (_c *DSReaderWriter_Iterator_Call) RunAndReturn(run func(ctx context.Context, opts corekv.IterOptions) (corekv.Iterator, error)) *DSReaderWriter_Iterator_Call {
	_c.Call.Return(run)
	return _c
}

// Set provides a mock function for the type DSReaderWriter
func (_mock *DSReaderWriter) Set(ctx context.Context, key []byte, value []byte) error {
	ret := _mock.Called(ctx, key, value)

	if len(ret) == 0 {
		panic("no return value specified for Set")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []byte, []byte) error); ok {
		r0 = returnFunc(ctx, key, value)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// DSReaderWriter_Set_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Set'
type DSReaderWriter_Set_Call struct {
	*mock.Call
}

// Set is a helper method to define mock.On call
//   - ctx
//   - key
//   - value
func (_e *DSReaderWriter_Expecter) Set(ctx interface{}, key interface{}, value interface{}) *DSReaderWriter_Set_Call {
	return &DSReaderWriter_Set_Call{Call: _e.mock.On("Set", ctx, key, value)}
}

func (_c *DSReaderWriter_Set_Call) Run(run func(ctx context.Context, key []byte, value []byte)) *DSReaderWriter_Set_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]byte), args[2].([]byte))
	})
	return _c
}

func (_c *DSReaderWriter_Set_Call) Return(err error) *DSReaderWriter_Set_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *DSReaderWriter_Set_Call) RunAndReturn(run func(ctx context.Context, key []byte, value []byte) error) *DSReaderWriter_Set_Call {
	_c.Call.Return(run)
	return _c
}
