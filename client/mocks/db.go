// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/sourcenetwork/lens/host-go/config/model"
	"github.com/sourcenetwork/defradb/acp/identity"
	"github.com/sourcenetwork/defradb/client"
	"github.com/sourcenetwork/defradb/crypto"
	"github.com/sourcenetwork/immutable"
	mock "github.com/stretchr/testify/mock"
)

// NewDB creates a new instance of DB. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDB(t interface {
	mock.TestingT
	Cleanup(func())
}) *DB {
	mock := &DB{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// DB is an autogenerated mock type for the DB type
type DB struct {
	mock.Mock
}

type DB_Expecter struct {
	mock *mock.Mock
}

func (_m *DB) EXPECT() *DB_Expecter {
	return &DB_Expecter{mock: &_m.Mock}
}

// AddDACActorRelationship provides a mock function for the type DB
func (_mock *DB) AddDACActorRelationship(ctx context.Context, collectionName string, docID string, relation string, targetActor string) (client.AddActorRelationshipResult, error) {
	ret := _mock.Called(ctx, collectionName, docID, relation, targetActor)

	if len(ret) == 0 {
		panic("no return value specified for AddDACActorRelationship")
	}

	var r0 client.AddActorRelationshipResult
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string, string) (client.AddActorRelationshipResult, error)); ok {
		return returnFunc(ctx, collectionName, docID, relation, targetActor)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string, string) client.AddActorRelationshipResult); ok {
		r0 = returnFunc(ctx, collectionName, docID, relation, targetActor)
	} else {
		r0 = ret.Get(0).(client.AddActorRelationshipResult)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, string, string) error); ok {
		r1 = returnFunc(ctx, collectionName, docID, relation, targetActor)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// DB_AddDACActorRelationship_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddDACActorRelationship'
type DB_AddDACActorRelationship_Call struct {
	*mock.Call
}

// AddDACActorRelationship is a helper method to define mock.On call
//   - ctx
//   - collectionName
//   - docID
//   - relation
//   - targetActor
func (_e *DB_Expecter) AddDACActorRelationship(ctx interface{}, collectionName interface{}, docID interface{}, relation interface{}, targetActor interface{}) *DB_AddDACActorRelationship_Call {
	return &DB_AddDACActorRelationship_Call{Call: _e.mock.On("AddDACActorRelationship", ctx, collectionName, docID, relation, targetActor)}
}

func (_c *DB_AddDACActorRelationship_Call) Run(run func(ctx context.Context, collectionName string, docID string, relation string, targetActor string)) *DB_AddDACActorRelationship_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(string))
	})
	return _c
}

func (_c *DB_AddDACActorRelationship_Call) Return(addActorRelationshipResult client.AddActorRelationshipResult, err error) *DB_AddDACActorRelationship_Call {
	_c.Call.Return(addActorRelationshipResult, err)
	return _c
}

func (_c *DB_AddDACActorRelationship_Call) RunAndReturn(run func(ctx context.Context, collectionName string, docID string, relation string, targetActor string) (client.AddActorRelationshipResult, error)) *DB_AddDACActorRelationship_Call {
	_c.Call.Return(run)
	return _c
}

// AddDACPolicy provides a mock function for the type DB
func (_mock *DB) AddDACPolicy(ctx context.Context, policy string) (client.AddPolicyResult, error) {
	ret := _mock.Called(ctx, policy)

	if len(ret) == 0 {
		panic("no return value specified for AddDACPolicy")
	}

	var r0 client.AddPolicyResult
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (client.AddPolicyResult, error)); ok {
		return returnFunc(ctx, policy)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) client.AddPolicyResult); ok {
		r0 = returnFunc(ctx, policy)
	} else {
		r0 = ret.Get(0).(client.AddPolicyResult)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, policy)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// DB_AddDACPolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddDACPolicy'
type DB_AddDACPolicy_Call struct {
	*mock.Call
}

// AddDACPolicy is a helper method to define mock.On call
//   - ctx
//   - policy
func (_e *DB_Expecter) AddDACPolicy(ctx interface{}, policy interface{}) *DB_AddDACPolicy_Call {
	return &DB_AddDACPolicy_Call{Call: _e.mock.On("AddDACPolicy", ctx, policy)}
}

func (_c *DB_AddDACPolicy_Call) Run(run func(ctx context.Context, policy string)) *DB_AddDACPolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *DB_AddDACPolicy_Call) Return(addPolicyResult client.AddPolicyResult, err error) *DB_AddDACPolicy_Call {
	_c.Call.Return(addPolicyResult, err)
	return _c
}

func (_c *DB_AddDACPolicy_Call) RunAndReturn(run func(ctx context.Context, policy string) (client.AddPolicyResult, error)) *DB_AddDACPolicy_Call {
	_c.Call.Return(run)
	return _c
}

// AddSchema provides a mock function for the type DB
func (_mock *DB) AddSchema(ctx context.Context, sdl string) ([]client.CollectionVersion, error) {
	ret := _mock.Called(ctx, sdl)

	if len(ret) == 0 {
		panic("no return value specified for AddSchema")
	}

	var r0 []client.CollectionVersion
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) ([]client.CollectionVersion, error)); ok {
		return returnFunc(ctx, sdl)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) []client.CollectionVersion); ok {
		r0 = returnFunc(ctx, sdl)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]client.CollectionVersion)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, sdl)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// DB_AddSchema_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddSchema'
type DB_AddSchema_Call struct {
	*mock.Call
}

// AddSchema is a helper method to define mock.On call
//   - ctx
//   - sdl
func (_e *DB_Expecter) AddSchema(ctx interface{}, sdl interface{}) *DB_AddSchema_Call {
	return &DB_AddSchema_Call{Call: _e.mock.On("AddSchema", ctx, sdl)}
}

func (_c *DB_AddSchema_Call) Run(run func(ctx context.Context, sdl string)) *DB_AddSchema_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *DB_AddSchema_Call) Return(collectionVersions []client.CollectionVersion, err error) *DB_AddSchema_Call {
	_c.Call.Return(collectionVersions, err)
	return _c
}

func (_c *DB_AddSchema_Call) RunAndReturn(run func(ctx context.Context, sdl string) ([]client.CollectionVersion, error)) *DB_AddSchema_Call {
	_c.Call.Return(run)
	return _c
}

// AddView provides a mock function for the type DB
func (_mock *DB) AddView(ctx context.Context, gqlQuery string, sdl string, transform immutable.Option[model.Lens]) ([]client.CollectionDefinition, error) {
	ret := _mock.Called(ctx, gqlQuery, sdl, transform)

	if len(ret) == 0 {
		panic("no return value specified for AddView")
	}

	var r0 []client.CollectionDefinition
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, immutable.Option[model.Lens]) ([]client.CollectionDefinition, error)); ok {
		return returnFunc(ctx, gqlQuery, sdl, transform)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, immutable.Option[model.Lens]) []client.CollectionDefinition); ok {
		r0 = returnFunc(ctx, gqlQuery, sdl, transform)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]client.CollectionDefinition)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, immutable.Option[model.Lens]) error); ok {
		r1 = returnFunc(ctx, gqlQuery, sdl, transform)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// DB_AddView_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddView'
type DB_AddView_Call struct {
	*mock.Call
}

// AddView is a helper method to define mock.On call
//   - ctx
//   - gqlQuery
//   - sdl
//   - transform
func (_e *DB_Expecter) AddView(ctx interface{}, gqlQuery interface{}, sdl interface{}, transform interface{}) *DB_AddView_Call {
	return &DB_AddView_Call{Call: _e.mock.On("AddView", ctx, gqlQuery, sdl, transform)}
}

func (_c *DB_AddView_Call) Run(run func(ctx context.Context, gqlQuery string, sdl string, transform immutable.Option[model.Lens])) *DB_AddView_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(immutable.Option[model.Lens]))
	})
	return _c
}

func (_c *DB_AddView_Call) Return(collectionDefinitions []client.CollectionDefinition, err error) *DB_AddView_Call {
	_c.Call.Return(collectionDefinitions, err)
	return _c
}

func (_c *DB_AddView_Call) RunAndReturn(run func(ctx context.Context, gqlQuery string, sdl string, transform immutable.Option[model.Lens]) ([]client.CollectionDefinition, error)) *DB_AddView_Call {
	_c.Call.Return(run)
	return _c
}

// BasicExport provides a mock function for the type DB
func (_mock *DB) BasicExport(ctx context.Context, config *client.BackupConfig) error {
	ret := _mock.Called(ctx, config)

	if len(ret) == 0 {
		panic("no return value specified for BasicExport")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *client.BackupConfig) error); ok {
		r0 = returnFunc(ctx, config)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// DB_BasicExport_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BasicExport'
type DB_BasicExport_Call struct {
	*mock.Call
}

// BasicExport is a helper method to define mock.On call
//   - ctx
//   - config
func (_e *DB_Expecter) BasicExport(ctx interface{}, config interface{}) *DB_BasicExport_Call {
	return &DB_BasicExport_Call{Call: _e.mock.On("BasicExport", ctx, config)}
}

func (_c *DB_BasicExport_Call) Run(run func(ctx context.Context, config *client.BackupConfig)) *DB_BasicExport_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*client.BackupConfig))
	})
	return _c
}

func (_c *DB_BasicExport_Call) Return(err error) *DB_BasicExport_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *DB_BasicExport_Call) RunAndReturn(run func(ctx context.Context, config *client.BackupConfig) error) *DB_BasicExport_Call {
	_c.Call.Return(run)
	return _c
}

// BasicImport provides a mock function for the type DB
func (_mock *DB) BasicImport(ctx context.Context, filepath string) error {
	ret := _mock.Called(ctx, filepath)

	if len(ret) == 0 {
		panic("no return value specified for BasicImport")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, filepath)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// DB_BasicImport_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BasicImport'
type DB_BasicImport_Call struct {
	*mock.Call
}

// BasicImport is a helper method to define mock.On call
//   - ctx
//   - filepath
func (_e *DB_Expecter) BasicImport(ctx interface{}, filepath interface{}) *DB_BasicImport_Call {
	return &DB_BasicImport_Call{Call: _e.mock.On("BasicImport", ctx, filepath)}
}

func (_c *DB_BasicImport_Call) Run(run func(ctx context.Context, filepath string)) *DB_BasicImport_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *DB_BasicImport_Call) Return(err error) *DB_BasicImport_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *DB_BasicImport_Call) RunAndReturn(run func(ctx context.Context, filepath string) error) *DB_BasicImport_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteDACActorRelationship provides a mock function for the type DB
func (_mock *DB) DeleteDACActorRelationship(ctx context.Context, collectionName string, docID string, relation string, targetActor string) (client.DeleteActorRelationshipResult, error) {
	ret := _mock.Called(ctx, collectionName, docID, relation, targetActor)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDACActorRelationship")
	}

	var r0 client.DeleteActorRelationshipResult
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string, string) (client.DeleteActorRelationshipResult, error)); ok {
		return returnFunc(ctx, collectionName, docID, relation, targetActor)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string, string) client.DeleteActorRelationshipResult); ok {
		r0 = returnFunc(ctx, collectionName, docID, relation, targetActor)
	} else {
		r0 = ret.Get(0).(client.DeleteActorRelationshipResult)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, string, string) error); ok {
		r1 = returnFunc(ctx, collectionName, docID, relation, targetActor)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// DB_DeleteDACActorRelationship_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteDACActorRelationship'
type DB_DeleteDACActorRelationship_Call struct {
	*mock.Call
}

// DeleteDACActorRelationship is a helper method to define mock.On call
//   - ctx
//   - collectionName
//   - docID
//   - relation
//   - targetActor
func (_e *DB_Expecter) DeleteDACActorRelationship(ctx interface{}, collectionName interface{}, docID interface{}, relation interface{}, targetActor interface{}) *DB_DeleteDACActorRelationship_Call {
	return &DB_DeleteDACActorRelationship_Call{Call: _e.mock.On("DeleteDACActorRelationship", ctx, collectionName, docID, relation, targetActor)}
}

func (_c *DB_DeleteDACActorRelationship_Call) Run(run func(ctx context.Context, collectionName string, docID string, relation string, targetActor string)) *DB_DeleteDACActorRelationship_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(string))
	})
	return _c
}

func (_c *DB_DeleteDACActorRelationship_Call) Return(deleteActorRelationshipResult client.DeleteActorRelationshipResult, err error) *DB_DeleteDACActorRelationship_Call {
	_c.Call.Return(deleteActorRelationshipResult, err)
	return _c
}

func (_c *DB_DeleteDACActorRelationship_Call) RunAndReturn(run func(ctx context.Context, collectionName string, docID string, relation string, targetActor string) (client.DeleteActorRelationshipResult, error)) *DB_DeleteDACActorRelationship_Call {
	_c.Call.Return(run)
	return _c
}

// ExecRequest provides a mock function for the type DB
func (_mock *DB) ExecRequest(ctx context.Context, request string, opts ...client.RequestOption) *client.RequestResult {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, request, opts)
	} else {
		tmpRet = _mock.Called(ctx, request)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for ExecRequest")
	}

	var r0 *client.RequestResult
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...client.RequestOption) *client.RequestResult); ok {
		r0 = returnFunc(ctx, request, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.RequestResult)
		}
	}
	return r0
}

// DB_ExecRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExecRequest'
type DB_ExecRequest_Call struct {
	*mock.Call
}

// ExecRequest is a helper method to define mock.On call
//   - ctx
//   - request
//   - opts
func (_e *DB_Expecter) ExecRequest(ctx interface{}, request interface{}, opts ...interface{}) *DB_ExecRequest_Call {
	return &DB_ExecRequest_Call{Call: _e.mock.On("ExecRequest",
		append([]interface{}{ctx, request}, opts...)...)}
}

func (_c *DB_ExecRequest_Call) Run(run func(ctx context.Context, request string, opts ...client.RequestOption)) *DB_ExecRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[2].([]client.RequestOption)
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *DB_ExecRequest_Call) Return(requestResult *client.RequestResult) *DB_ExecRequest_Call {
	_c.Call.Return(requestResult)
	return _c
}

func (_c *DB_ExecRequest_Call) RunAndReturn(run func(ctx context.Context, request string, opts ...client.RequestOption) *client.RequestResult) *DB_ExecRequest_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllIndexes provides a mock function for the type DB
func (_mock *DB) GetAllIndexes(ctx context.Context) (map[client.CollectionName][]client.IndexDescription, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAllIndexes")
	}

	var r0 map[client.CollectionName][]client.IndexDescription
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (map[client.CollectionName][]client.IndexDescription, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) map[client.CollectionName][]client.IndexDescription); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[client.CollectionName][]client.IndexDescription)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// DB_GetAllIndexes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllIndexes'
type DB_GetAllIndexes_Call struct {
	*mock.Call
}

// GetAllIndexes is a helper method to define mock.On call
//   - ctx
func (_e *DB_Expecter) GetAllIndexes(ctx interface{}) *DB_GetAllIndexes_Call {
	return &DB_GetAllIndexes_Call{Call: _e.mock.On("GetAllIndexes", ctx)}
}

func (_c *DB_GetAllIndexes_Call) Run(run func(ctx context.Context)) *DB_GetAllIndexes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *DB_GetAllIndexes_Call) Return(vToIndexDescriptions map[client.CollectionName][]client.IndexDescription, err error) *DB_GetAllIndexes_Call {
	_c.Call.Return(vToIndexDescriptions, err)
	return _c
}

func (_c *DB_GetAllIndexes_Call) RunAndReturn(run func(ctx context.Context) (map[client.CollectionName][]client.IndexDescription, error)) *DB_GetAllIndexes_Call {
	_c.Call.Return(run)
	return _c
}

// GetCollectionByName provides a mock function for the type DB
func (_mock *DB) GetCollectionByName(ctx context.Context, name client.CollectionName) (client.Collection, error) {
	ret := _mock.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for GetCollectionByName")
	}

	var r0 client.Collection
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, client.CollectionName) (client.Collection, error)); ok {
		return returnFunc(ctx, name)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, client.CollectionName) client.Collection); ok {
		r0 = returnFunc(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(client.Collection)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, client.CollectionName) error); ok {
		r1 = returnFunc(ctx, name)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// DB_GetCollectionByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCollectionByName'
type DB_GetCollectionByName_Call struct {
	*mock.Call
}

// GetCollectionByName is a helper method to define mock.On call
//   - ctx
//   - name
func (_e *DB_Expecter) GetCollectionByName(ctx interface{}, name interface{}) *DB_GetCollectionByName_Call {
	return &DB_GetCollectionByName_Call{Call: _e.mock.On("GetCollectionByName", ctx, name)}
}

func (_c *DB_GetCollectionByName_Call) Run(run func(ctx context.Context, name client.CollectionName)) *DB_GetCollectionByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(client.CollectionName))
	})
	return _c
}

func (_c *DB_GetCollectionByName_Call) Return(collection client.Collection, err error) *DB_GetCollectionByName_Call {
	_c.Call.Return(collection, err)
	return _c
}

func (_c *DB_GetCollectionByName_Call) RunAndReturn(run func(ctx context.Context, name client.CollectionName) (client.Collection, error)) *DB_GetCollectionByName_Call {
	_c.Call.Return(run)
	return _c
}

// GetCollections provides a mock function for the type DB
func (_mock *DB) GetCollections(ctx context.Context, options client.CollectionFetchOptions) ([]client.Collection, error) {
	ret := _mock.Called(ctx, options)

	if len(ret) == 0 {
		panic("no return value specified for GetCollections")
	}

	var r0 []client.Collection
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, client.CollectionFetchOptions) ([]client.Collection, error)); ok {
		return returnFunc(ctx, options)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, client.CollectionFetchOptions) []client.Collection); ok {
		r0 = returnFunc(ctx, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]client.Collection)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, client.CollectionFetchOptions) error); ok {
		r1 = returnFunc(ctx, options)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// DB_GetCollections_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCollections'
type DB_GetCollections_Call struct {
	*mock.Call
}

// GetCollections is a helper method to define mock.On call
//   - ctx
//   - options
func (_e *DB_Expecter) GetCollections(ctx interface{}, options interface{}) *DB_GetCollections_Call {
	return &DB_GetCollections_Call{Call: _e.mock.On("GetCollections", ctx, options)}
}

func (_c *DB_GetCollections_Call) Run(run func(ctx context.Context, options client.CollectionFetchOptions)) *DB_GetCollections_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(client.CollectionFetchOptions))
	})
	return _c
}

func (_c *DB_GetCollections_Call) Return(collections []client.Collection, err error) *DB_GetCollections_Call {
	_c.Call.Return(collections, err)
	return _c
}

func (_c *DB_GetCollections_Call) RunAndReturn(run func(ctx context.Context, options client.CollectionFetchOptions) ([]client.Collection, error)) *DB_GetCollections_Call {
	_c.Call.Return(run)
	return _c
}

// GetNodeIdentity provides a mock function for the type DB
func (_mock *DB) GetNodeIdentity(ctx context.Context) (immutable.Option[identity.PublicRawIdentity], error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetNodeIdentity")
	}

	var r0 immutable.Option[identity.PublicRawIdentity]
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (immutable.Option[identity.PublicRawIdentity], error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) immutable.Option[identity.PublicRawIdentity]); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(immutable.Option[identity.PublicRawIdentity])
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// DB_GetNodeIdentity_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNodeIdentity'
type DB_GetNodeIdentity_Call struct {
	*mock.Call
}

// GetNodeIdentity is a helper method to define mock.On call
//   - ctx
func (_e *DB_Expecter) GetNodeIdentity(ctx interface{}) *DB_GetNodeIdentity_Call {
	return &DB_GetNodeIdentity_Call{Call: _e.mock.On("GetNodeIdentity", ctx)}
}

func (_c *DB_GetNodeIdentity_Call) Run(run func(ctx context.Context)) *DB_GetNodeIdentity_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *DB_GetNodeIdentity_Call) Return(option immutable.Option[identity.PublicRawIdentity], err error) *DB_GetNodeIdentity_Call {
	_c.Call.Return(option, err)
	return _c
}

func (_c *DB_GetNodeIdentity_Call) RunAndReturn(run func(ctx context.Context) (immutable.Option[identity.PublicRawIdentity], error)) *DB_GetNodeIdentity_Call {
	_c.Call.Return(run)
	return _c
}

// GetSchemaByVersionID provides a mock function for the type DB
func (_mock *DB) GetSchemaByVersionID(ctx context.Context, versionID string) (client.SchemaDescription, error) {
	ret := _mock.Called(ctx, versionID)

	if len(ret) == 0 {
		panic("no return value specified for GetSchemaByVersionID")
	}

	var r0 client.SchemaDescription
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (client.SchemaDescription, error)); ok {
		return returnFunc(ctx, versionID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) client.SchemaDescription); ok {
		r0 = returnFunc(ctx, versionID)
	} else {
		r0 = ret.Get(0).(client.SchemaDescription)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, versionID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// DB_GetSchemaByVersionID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSchemaByVersionID'
type DB_GetSchemaByVersionID_Call struct {
	*mock.Call
}

// GetSchemaByVersionID is a helper method to define mock.On call
//   - ctx
//   - versionID
func (_e *DB_Expecter) GetSchemaByVersionID(ctx interface{}, versionID interface{}) *DB_GetSchemaByVersionID_Call {
	return &DB_GetSchemaByVersionID_Call{Call: _e.mock.On("GetSchemaByVersionID", ctx, versionID)}
}

func (_c *DB_GetSchemaByVersionID_Call) Run(run func(ctx context.Context, versionID string)) *DB_GetSchemaByVersionID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *DB_GetSchemaByVersionID_Call) Return(schemaDescription client.SchemaDescription, err error) *DB_GetSchemaByVersionID_Call {
	_c.Call.Return(schemaDescription, err)
	return _c
}

func (_c *DB_GetSchemaByVersionID_Call) RunAndReturn(run func(ctx context.Context, versionID string) (client.SchemaDescription, error)) *DB_GetSchemaByVersionID_Call {
	_c.Call.Return(run)
	return _c
}

// GetSchemas provides a mock function for the type DB
func (_mock *DB) GetSchemas(ctx context.Context, options client.SchemaFetchOptions) ([]client.SchemaDescription, error) {
	ret := _mock.Called(ctx, options)

	if len(ret) == 0 {
		panic("no return value specified for GetSchemas")
	}

	var r0 []client.SchemaDescription
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, client.SchemaFetchOptions) ([]client.SchemaDescription, error)); ok {
		return returnFunc(ctx, options)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, client.SchemaFetchOptions) []client.SchemaDescription); ok {
		r0 = returnFunc(ctx, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]client.SchemaDescription)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, client.SchemaFetchOptions) error); ok {
		r1 = returnFunc(ctx, options)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// DB_GetSchemas_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSchemas'
type DB_GetSchemas_Call struct {
	*mock.Call
}

// GetSchemas is a helper method to define mock.On call
//   - ctx
//   - options
func (_e *DB_Expecter) GetSchemas(ctx interface{}, options interface{}) *DB_GetSchemas_Call {
	return &DB_GetSchemas_Call{Call: _e.mock.On("GetSchemas", ctx, options)}
}

func (_c *DB_GetSchemas_Call) Run(run func(ctx context.Context, options client.SchemaFetchOptions)) *DB_GetSchemas_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(client.SchemaFetchOptions))
	})
	return _c
}

func (_c *DB_GetSchemas_Call) Return(schemaDescriptions []client.SchemaDescription, err error) *DB_GetSchemas_Call {
	_c.Call.Return(schemaDescriptions, err)
	return _c
}

func (_c *DB_GetSchemas_Call) RunAndReturn(run func(ctx context.Context, options client.SchemaFetchOptions) ([]client.SchemaDescription, error)) *DB_GetSchemas_Call {
	_c.Call.Return(run)
	return _c
}

// LensRegistry provides a mock function for the type DB
func (_mock *DB) LensRegistry() client.LensRegistry {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for LensRegistry")
	}

	var r0 client.LensRegistry
	if returnFunc, ok := ret.Get(0).(func() client.LensRegistry); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(client.LensRegistry)
		}
	}
	return r0
}

// DB_LensRegistry_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LensRegistry'
type DB_LensRegistry_Call struct {
	*mock.Call
}

// LensRegistry is a helper method to define mock.On call
func (_e *DB_Expecter) LensRegistry() *DB_LensRegistry_Call {
	return &DB_LensRegistry_Call{Call: _e.mock.On("LensRegistry")}
}

func (_c *DB_LensRegistry_Call) Run(run func()) *DB_LensRegistry_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *DB_LensRegistry_Call) Return(lensRegistry client.LensRegistry) *DB_LensRegistry_Call {
	_c.Call.Return(lensRegistry)
	return _c
}

func (_c *DB_LensRegistry_Call) RunAndReturn(run func() client.LensRegistry) *DB_LensRegistry_Call {
	_c.Call.Return(run)
	return _c
}

// NewConcurrentTxn provides a mock function for the type DB
func (_mock *DB) NewConcurrentTxn(ctx context.Context, readOnly bool) (client.Txn, error) {
	ret := _mock.Called(ctx, readOnly)

	if len(ret) == 0 {
		panic("no return value specified for NewConcurrentTxn")
	}

	var r0 client.Txn
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, bool) (client.Txn, error)); ok {
		return returnFunc(ctx, readOnly)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, bool) client.Txn); ok {
		r0 = returnFunc(ctx, readOnly)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(client.Txn)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, bool) error); ok {
		r1 = returnFunc(ctx, readOnly)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// DB_NewConcurrentTxn_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewConcurrentTxn'
type DB_NewConcurrentTxn_Call struct {
	*mock.Call
}

// NewConcurrentTxn is a helper method to define mock.On call
//   - ctx
//   - readOnly
func (_e *DB_Expecter) NewConcurrentTxn(ctx interface{}, readOnly interface{}) *DB_NewConcurrentTxn_Call {
	return &DB_NewConcurrentTxn_Call{Call: _e.mock.On("NewConcurrentTxn", ctx, readOnly)}
}

func (_c *DB_NewConcurrentTxn_Call) Run(run func(ctx context.Context, readOnly bool)) *DB_NewConcurrentTxn_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(bool))
	})
	return _c
}

func (_c *DB_NewConcurrentTxn_Call) Return(txn client.Txn, err error) *DB_NewConcurrentTxn_Call {
	_c.Call.Return(txn, err)
	return _c
}

func (_c *DB_NewConcurrentTxn_Call) RunAndReturn(run func(ctx context.Context, readOnly bool) (client.Txn, error)) *DB_NewConcurrentTxn_Call {
	_c.Call.Return(run)
	return _c
}

// NewTxn provides a mock function for the type DB
func (_mock *DB) NewTxn(ctx context.Context, readOnly bool) (client.Txn, error) {
	ret := _mock.Called(ctx, readOnly)

	if len(ret) == 0 {
		panic("no return value specified for NewTxn")
	}

	var r0 client.Txn
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, bool) (client.Txn, error)); ok {
		return returnFunc(ctx, readOnly)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, bool) client.Txn); ok {
		r0 = returnFunc(ctx, readOnly)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(client.Txn)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, bool) error); ok {
		r1 = returnFunc(ctx, readOnly)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// DB_NewTxn_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewTxn'
type DB_NewTxn_Call struct {
	*mock.Call
}

// NewTxn is a helper method to define mock.On call
//   - ctx
//   - readOnly
func (_e *DB_Expecter) NewTxn(ctx interface{}, readOnly interface{}) *DB_NewTxn_Call {
	return &DB_NewTxn_Call{Call: _e.mock.On("NewTxn", ctx, readOnly)}
}

func (_c *DB_NewTxn_Call) Run(run func(ctx context.Context, readOnly bool)) *DB_NewTxn_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(bool))
	})
	return _c
}

func (_c *DB_NewTxn_Call) Return(txn client.Txn, err error) *DB_NewTxn_Call {
	_c.Call.Return(txn, err)
	return _c
}

func (_c *DB_NewTxn_Call) RunAndReturn(run func(ctx context.Context, readOnly bool) (client.Txn, error)) *DB_NewTxn_Call {
	_c.Call.Return(run)
	return _c
}

// PatchCollection provides a mock function for the type DB
func (_mock *DB) PatchCollection(ctx context.Context, patch string) error {
	ret := _mock.Called(ctx, patch)

	if len(ret) == 0 {
		panic("no return value specified for PatchCollection")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, patch)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// DB_PatchCollection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PatchCollection'
type DB_PatchCollection_Call struct {
	*mock.Call
}

// PatchCollection is a helper method to define mock.On call
//   - ctx
//   - patch
func (_e *DB_Expecter) PatchCollection(ctx interface{}, patch interface{}) *DB_PatchCollection_Call {
	return &DB_PatchCollection_Call{Call: _e.mock.On("PatchCollection", ctx, patch)}
}

func (_c *DB_PatchCollection_Call) Run(run func(ctx context.Context, patch string)) *DB_PatchCollection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *DB_PatchCollection_Call) Return(err error) *DB_PatchCollection_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *DB_PatchCollection_Call) RunAndReturn(run func(ctx context.Context, patch string) error) *DB_PatchCollection_Call {
	_c.Call.Return(run)
	return _c
}

// PatchSchema provides a mock function for the type DB
func (_mock *DB) PatchSchema(ctx context.Context, patch string, migration immutable.Option[model.Lens], setDefault bool) error {
	ret := _mock.Called(ctx, patch, migration, setDefault)

	if len(ret) == 0 {
		panic("no return value specified for PatchSchema")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, immutable.Option[model.Lens], bool) error); ok {
		r0 = returnFunc(ctx, patch, migration, setDefault)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// DB_PatchSchema_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PatchSchema'
type DB_PatchSchema_Call struct {
	*mock.Call
}

// PatchSchema is a helper method to define mock.On call
//   - ctx
//   - patch
//   - migration
//   - setDefault
func (_e *DB_Expecter) PatchSchema(ctx interface{}, patch interface{}, migration interface{}, setDefault interface{}) *DB_PatchSchema_Call {
	return &DB_PatchSchema_Call{Call: _e.mock.On("PatchSchema", ctx, patch, migration, setDefault)}
}

func (_c *DB_PatchSchema_Call) Run(run func(ctx context.Context, patch string, migration immutable.Option[model.Lens], setDefault bool)) *DB_PatchSchema_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(immutable.Option[model.Lens]), args[3].(bool))
	})
	return _c
}

func (_c *DB_PatchSchema_Call) Return(err error) *DB_PatchSchema_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *DB_PatchSchema_Call) RunAndReturn(run func(ctx context.Context, patch string, migration immutable.Option[model.Lens], setDefault bool) error) *DB_PatchSchema_Call {
	_c.Call.Return(run)
	return _c
}

// PrintDump provides a mock function for the type DB
func (_mock *DB) PrintDump(ctx context.Context) error {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for PrintDump")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// DB_PrintDump_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PrintDump'
type DB_PrintDump_Call struct {
	*mock.Call
}

// PrintDump is a helper method to define mock.On call
//   - ctx
func (_e *DB_Expecter) PrintDump(ctx interface{}) *DB_PrintDump_Call {
	return &DB_PrintDump_Call{Call: _e.mock.On("PrintDump", ctx)}
}

func (_c *DB_PrintDump_Call) Run(run func(ctx context.Context)) *DB_PrintDump_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *DB_PrintDump_Call) Return(err error) *DB_PrintDump_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *DB_PrintDump_Call) RunAndReturn(run func(ctx context.Context) error) *DB_PrintDump_Call {
	_c.Call.Return(run)
	return _c
}

// RefreshViews provides a mock function for the type DB
func (_mock *DB) RefreshViews(ctx context.Context, options client.CollectionFetchOptions) error {
	ret := _mock.Called(ctx, options)

	if len(ret) == 0 {
		panic("no return value specified for RefreshViews")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, client.CollectionFetchOptions) error); ok {
		r0 = returnFunc(ctx, options)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// DB_RefreshViews_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RefreshViews'
type DB_RefreshViews_Call struct {
	*mock.Call
}

// RefreshViews is a helper method to define mock.On call
//   - ctx
//   - options
func (_e *DB_Expecter) RefreshViews(ctx interface{}, options interface{}) *DB_RefreshViews_Call {
	return &DB_RefreshViews_Call{Call: _e.mock.On("RefreshViews", ctx, options)}
}

func (_c *DB_RefreshViews_Call) Run(run func(ctx context.Context, options client.CollectionFetchOptions)) *DB_RefreshViews_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(client.CollectionFetchOptions))
	})
	return _c
}

func (_c *DB_RefreshViews_Call) Return(err error) *DB_RefreshViews_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *DB_RefreshViews_Call) RunAndReturn(run func(ctx context.Context, options client.CollectionFetchOptions) error) *DB_RefreshViews_Call {
	_c.Call.Return(run)
	return _c
}

// SetActiveSchemaVersion provides a mock function for the type DB
func (_mock *DB) SetActiveSchemaVersion(ctx context.Context, version string) error {
	ret := _mock.Called(ctx, version)

	if len(ret) == 0 {
		panic("no return value specified for SetActiveSchemaVersion")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, version)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// DB_SetActiveSchemaVersion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetActiveSchemaVersion'
type DB_SetActiveSchemaVersion_Call struct {
	*mock.Call
}

// SetActiveSchemaVersion is a helper method to define mock.On call
//   - ctx
//   - version
func (_e *DB_Expecter) SetActiveSchemaVersion(ctx interface{}, version interface{}) *DB_SetActiveSchemaVersion_Call {
	return &DB_SetActiveSchemaVersion_Call{Call: _e.mock.On("SetActiveSchemaVersion", ctx, version)}
}

func (_c *DB_SetActiveSchemaVersion_Call) Run(run func(ctx context.Context, version string)) *DB_SetActiveSchemaVersion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *DB_SetActiveSchemaVersion_Call) Return(err error) *DB_SetActiveSchemaVersion_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *DB_SetActiveSchemaVersion_Call) RunAndReturn(run func(ctx context.Context, version string) error) *DB_SetActiveSchemaVersion_Call {
	_c.Call.Return(run)
	return _c
}

// SetMigration provides a mock function for the type DB
func (_mock *DB) SetMigration(ctx context.Context, config client.LensConfig) error {
	ret := _mock.Called(ctx, config)

	if len(ret) == 0 {
		panic("no return value specified for SetMigration")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, client.LensConfig) error); ok {
		r0 = returnFunc(ctx, config)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// DB_SetMigration_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetMigration'
type DB_SetMigration_Call struct {
	*mock.Call
}

// SetMigration is a helper method to define mock.On call
//   - ctx
//   - config
func (_e *DB_Expecter) SetMigration(ctx interface{}, config interface{}) *DB_SetMigration_Call {
	return &DB_SetMigration_Call{Call: _e.mock.On("SetMigration", ctx, config)}
}

func (_c *DB_SetMigration_Call) Run(run func(ctx context.Context, config client.LensConfig)) *DB_SetMigration_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(client.LensConfig))
	})
	return _c
}

func (_c *DB_SetMigration_Call) Return(err error) *DB_SetMigration_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *DB_SetMigration_Call) RunAndReturn(run func(ctx context.Context, config client.LensConfig) error) *DB_SetMigration_Call {
	_c.Call.Return(run)
	return _c
}

// VerifySignature provides a mock function for the type DB
func (_mock *DB) VerifySignature(ctx context.Context, blockCid string, pubKey crypto.PublicKey) error {
	ret := _mock.Called(ctx, blockCid, pubKey)

	if len(ret) == 0 {
		panic("no return value specified for VerifySignature")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, crypto.PublicKey) error); ok {
		r0 = returnFunc(ctx, blockCid, pubKey)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// DB_VerifySignature_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VerifySignature'
type DB_VerifySignature_Call struct {
	*mock.Call
}

// VerifySignature is a helper method to define mock.On call
//   - ctx
//   - blockCid
//   - pubKey
func (_e *DB_Expecter) VerifySignature(ctx interface{}, blockCid interface{}, pubKey interface{}) *DB_VerifySignature_Call {
	return &DB_VerifySignature_Call{Call: _e.mock.On("VerifySignature", ctx, blockCid, pubKey)}
}

func (_c *DB_VerifySignature_Call) Run(run func(ctx context.Context, blockCid string, pubKey crypto.PublicKey)) *DB_VerifySignature_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(crypto.PublicKey))
	})
	return _c
}

func (_c *DB_VerifySignature_Call) Return(err error) *DB_VerifySignature_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *DB_VerifySignature_Call) RunAndReturn(run func(ctx context.Context, blockCid string, pubKey crypto.PublicKey) error) *DB_VerifySignature_Call {
	_c.Call.Return(run)
	return _c
}
