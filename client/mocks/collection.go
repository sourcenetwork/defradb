// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	client "github.com/sourcenetwork/defradb/client"

	immutable "github.com/sourcenetwork/immutable"

	mock "github.com/stretchr/testify/mock"
)

// Collection is an autogenerated mock type for the Collection type
type Collection struct {
	mock.Mock
}

type Collection_Expecter struct {
	mock *mock.Mock
}

func (_m *Collection) EXPECT() *Collection_Expecter {
	return &Collection_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, doc
func (_m *Collection) Create(ctx context.Context, doc *client.Document) error {
	ret := _m.Called(ctx, doc)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *client.Document) error); ok {
		r0 = rf(ctx, doc)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Collection_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type Collection_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - doc *client.Document
func (_e *Collection_Expecter) Create(ctx interface{}, doc interface{}) *Collection_Create_Call {
	return &Collection_Create_Call{Call: _e.mock.On("Create", ctx, doc)}
}

func (_c *Collection_Create_Call) Run(run func(ctx context.Context, doc *client.Document)) *Collection_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*client.Document))
	})
	return _c
}

func (_c *Collection_Create_Call) Return(_a0 error) *Collection_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Collection_Create_Call) RunAndReturn(run func(context.Context, *client.Document) error) *Collection_Create_Call {
	_c.Call.Return(run)
	return _c
}

// CreateIndex provides a mock function with given fields: _a0, _a1
func (_m *Collection) CreateIndex(_a0 context.Context, _a1 client.IndexDescriptionCreateRequest) (client.IndexDescription, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for CreateIndex")
	}

	var r0 client.IndexDescription
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, client.IndexDescriptionCreateRequest) (client.IndexDescription, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, client.IndexDescriptionCreateRequest) client.IndexDescription); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(client.IndexDescription)
	}

	if rf, ok := ret.Get(1).(func(context.Context, client.IndexDescriptionCreateRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Collection_CreateIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateIndex'
type Collection_CreateIndex_Call struct {
	*mock.Call
}

// CreateIndex is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 client.IndexDescriptionCreateRequest
func (_e *Collection_Expecter) CreateIndex(_a0 interface{}, _a1 interface{}) *Collection_CreateIndex_Call {
	return &Collection_CreateIndex_Call{Call: _e.mock.On("CreateIndex", _a0, _a1)}
}

func (_c *Collection_CreateIndex_Call) Run(run func(_a0 context.Context, _a1 client.IndexDescriptionCreateRequest)) *Collection_CreateIndex_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(client.IndexDescriptionCreateRequest))
	})
	return _c
}

func (_c *Collection_CreateIndex_Call) Return(_a0 client.IndexDescription, _a1 error) *Collection_CreateIndex_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Collection_CreateIndex_Call) RunAndReturn(run func(context.Context, client.IndexDescriptionCreateRequest) (client.IndexDescription, error)) *Collection_CreateIndex_Call {
	_c.Call.Return(run)
	return _c
}

// CreateMany provides a mock function with given fields: ctx, docs
func (_m *Collection) CreateMany(ctx context.Context, docs []*client.Document) error {
	ret := _m.Called(ctx, docs)

	if len(ret) == 0 {
		panic("no return value specified for CreateMany")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []*client.Document) error); ok {
		r0 = rf(ctx, docs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Collection_CreateMany_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateMany'
type Collection_CreateMany_Call struct {
	*mock.Call
}

// CreateMany is a helper method to define mock.On call
//   - ctx context.Context
//   - docs []*client.Document
func (_e *Collection_Expecter) CreateMany(ctx interface{}, docs interface{}) *Collection_CreateMany_Call {
	return &Collection_CreateMany_Call{Call: _e.mock.On("CreateMany", ctx, docs)}
}

func (_c *Collection_CreateMany_Call) Run(run func(ctx context.Context, docs []*client.Document)) *Collection_CreateMany_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]*client.Document))
	})
	return _c
}

func (_c *Collection_CreateMany_Call) Return(_a0 error) *Collection_CreateMany_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Collection_CreateMany_Call) RunAndReturn(run func(context.Context, []*client.Document) error) *Collection_CreateMany_Call {
	_c.Call.Return(run)
	return _c
}

// Definition provides a mock function with given fields:
func (_m *Collection) Definition() client.CollectionDefinition {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Definition")
	}

	var r0 client.CollectionDefinition
	if rf, ok := ret.Get(0).(func() client.CollectionDefinition); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(client.CollectionDefinition)
	}

	return r0
}

// Collection_Definition_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Definition'
type Collection_Definition_Call struct {
	*mock.Call
}

// Definition is a helper method to define mock.On call
func (_e *Collection_Expecter) Definition() *Collection_Definition_Call {
	return &Collection_Definition_Call{Call: _e.mock.On("Definition")}
}

func (_c *Collection_Definition_Call) Run(run func()) *Collection_Definition_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Collection_Definition_Call) Return(_a0 client.CollectionDefinition) *Collection_Definition_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Collection_Definition_Call) RunAndReturn(run func() client.CollectionDefinition) *Collection_Definition_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, docID
func (_m *Collection) Delete(ctx context.Context, docID client.DocID) (bool, error) {
	ret := _m.Called(ctx, docID)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, client.DocID) (bool, error)); ok {
		return rf(ctx, docID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, client.DocID) bool); ok {
		r0 = rf(ctx, docID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, client.DocID) error); ok {
		r1 = rf(ctx, docID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Collection_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type Collection_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - docID client.DocID
func (_e *Collection_Expecter) Delete(ctx interface{}, docID interface{}) *Collection_Delete_Call {
	return &Collection_Delete_Call{Call: _e.mock.On("Delete", ctx, docID)}
}

func (_c *Collection_Delete_Call) Run(run func(ctx context.Context, docID client.DocID)) *Collection_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(client.DocID))
	})
	return _c
}

func (_c *Collection_Delete_Call) Return(_a0 bool, _a1 error) *Collection_Delete_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Collection_Delete_Call) RunAndReturn(run func(context.Context, client.DocID) (bool, error)) *Collection_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteWithFilter provides a mock function with given fields: ctx, filter
func (_m *Collection) DeleteWithFilter(ctx context.Context, filter interface{}) (*client.DeleteResult, error) {
	ret := _m.Called(ctx, filter)

	if len(ret) == 0 {
		panic("no return value specified for DeleteWithFilter")
	}

	var r0 *client.DeleteResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}) (*client.DeleteResult, error)); ok {
		return rf(ctx, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, interface{}) *client.DeleteResult); ok {
		r0 = rf(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.DeleteResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, interface{}) error); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Collection_DeleteWithFilter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteWithFilter'
type Collection_DeleteWithFilter_Call struct {
	*mock.Call
}

// DeleteWithFilter is a helper method to define mock.On call
//   - ctx context.Context
//   - filter interface{}
func (_e *Collection_Expecter) DeleteWithFilter(ctx interface{}, filter interface{}) *Collection_DeleteWithFilter_Call {
	return &Collection_DeleteWithFilter_Call{Call: _e.mock.On("DeleteWithFilter", ctx, filter)}
}

func (_c *Collection_DeleteWithFilter_Call) Run(run func(ctx context.Context, filter interface{})) *Collection_DeleteWithFilter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(interface{}))
	})
	return _c
}

func (_c *Collection_DeleteWithFilter_Call) Return(_a0 *client.DeleteResult, _a1 error) *Collection_DeleteWithFilter_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Collection_DeleteWithFilter_Call) RunAndReturn(run func(context.Context, interface{}) (*client.DeleteResult, error)) *Collection_DeleteWithFilter_Call {
	_c.Call.Return(run)
	return _c
}

// Description provides a mock function with given fields:
func (_m *Collection) Description() client.CollectionDescription {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Description")
	}

	var r0 client.CollectionDescription
	if rf, ok := ret.Get(0).(func() client.CollectionDescription); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(client.CollectionDescription)
	}

	return r0
}

// Collection_Description_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Description'
type Collection_Description_Call struct {
	*mock.Call
}

// Description is a helper method to define mock.On call
func (_e *Collection_Expecter) Description() *Collection_Description_Call {
	return &Collection_Description_Call{Call: _e.mock.On("Description")}
}

func (_c *Collection_Description_Call) Run(run func()) *Collection_Description_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Collection_Description_Call) Return(_a0 client.CollectionDescription) *Collection_Description_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Collection_Description_Call) RunAndReturn(run func() client.CollectionDescription) *Collection_Description_Call {
	_c.Call.Return(run)
	return _c
}

// DropIndex provides a mock function with given fields: ctx, indexName
func (_m *Collection) DropIndex(ctx context.Context, indexName string) error {
	ret := _m.Called(ctx, indexName)

	if len(ret) == 0 {
		panic("no return value specified for DropIndex")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, indexName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Collection_DropIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DropIndex'
type Collection_DropIndex_Call struct {
	*mock.Call
}

// DropIndex is a helper method to define mock.On call
//   - ctx context.Context
//   - indexName string
func (_e *Collection_Expecter) DropIndex(ctx interface{}, indexName interface{}) *Collection_DropIndex_Call {
	return &Collection_DropIndex_Call{Call: _e.mock.On("DropIndex", ctx, indexName)}
}

func (_c *Collection_DropIndex_Call) Run(run func(ctx context.Context, indexName string)) *Collection_DropIndex_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Collection_DropIndex_Call) Return(_a0 error) *Collection_DropIndex_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Collection_DropIndex_Call) RunAndReturn(run func(context.Context, string) error) *Collection_DropIndex_Call {
	_c.Call.Return(run)
	return _c
}

// Exists provides a mock function with given fields: ctx, docID
func (_m *Collection) Exists(ctx context.Context, docID client.DocID) (bool, error) {
	ret := _m.Called(ctx, docID)

	if len(ret) == 0 {
		panic("no return value specified for Exists")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, client.DocID) (bool, error)); ok {
		return rf(ctx, docID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, client.DocID) bool); ok {
		r0 = rf(ctx, docID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, client.DocID) error); ok {
		r1 = rf(ctx, docID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Collection_Exists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Exists'
type Collection_Exists_Call struct {
	*mock.Call
}

// Exists is a helper method to define mock.On call
//   - ctx context.Context
//   - docID client.DocID
func (_e *Collection_Expecter) Exists(ctx interface{}, docID interface{}) *Collection_Exists_Call {
	return &Collection_Exists_Call{Call: _e.mock.On("Exists", ctx, docID)}
}

func (_c *Collection_Exists_Call) Run(run func(ctx context.Context, docID client.DocID)) *Collection_Exists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(client.DocID))
	})
	return _c
}

func (_c *Collection_Exists_Call) Return(_a0 bool, _a1 error) *Collection_Exists_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Collection_Exists_Call) RunAndReturn(run func(context.Context, client.DocID) (bool, error)) *Collection_Exists_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, docID, showDeleted
func (_m *Collection) Get(ctx context.Context, docID client.DocID, showDeleted bool) (*client.Document, error) {
	ret := _m.Called(ctx, docID, showDeleted)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *client.Document
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, client.DocID, bool) (*client.Document, error)); ok {
		return rf(ctx, docID, showDeleted)
	}
	if rf, ok := ret.Get(0).(func(context.Context, client.DocID, bool) *client.Document); ok {
		r0 = rf(ctx, docID, showDeleted)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.Document)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, client.DocID, bool) error); ok {
		r1 = rf(ctx, docID, showDeleted)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Collection_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type Collection_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - docID client.DocID
//   - showDeleted bool
func (_e *Collection_Expecter) Get(ctx interface{}, docID interface{}, showDeleted interface{}) *Collection_Get_Call {
	return &Collection_Get_Call{Call: _e.mock.On("Get", ctx, docID, showDeleted)}
}

func (_c *Collection_Get_Call) Run(run func(ctx context.Context, docID client.DocID, showDeleted bool)) *Collection_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(client.DocID), args[2].(bool))
	})
	return _c
}

func (_c *Collection_Get_Call) Return(_a0 *client.Document, _a1 error) *Collection_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Collection_Get_Call) RunAndReturn(run func(context.Context, client.DocID, bool) (*client.Document, error)) *Collection_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllDocIDs provides a mock function with given fields: ctx
func (_m *Collection) GetAllDocIDs(ctx context.Context) (<-chan client.DocIDResult, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAllDocIDs")
	}

	var r0 <-chan client.DocIDResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (<-chan client.DocIDResult, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) <-chan client.DocIDResult); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan client.DocIDResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Collection_GetAllDocIDs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllDocIDs'
type Collection_GetAllDocIDs_Call struct {
	*mock.Call
}

// GetAllDocIDs is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Collection_Expecter) GetAllDocIDs(ctx interface{}) *Collection_GetAllDocIDs_Call {
	return &Collection_GetAllDocIDs_Call{Call: _e.mock.On("GetAllDocIDs", ctx)}
}

func (_c *Collection_GetAllDocIDs_Call) Run(run func(ctx context.Context)) *Collection_GetAllDocIDs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Collection_GetAllDocIDs_Call) Return(_a0 <-chan client.DocIDResult, _a1 error) *Collection_GetAllDocIDs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Collection_GetAllDocIDs_Call) RunAndReturn(run func(context.Context) (<-chan client.DocIDResult, error)) *Collection_GetAllDocIDs_Call {
	_c.Call.Return(run)
	return _c
}

// GetIndexes provides a mock function with given fields: ctx
func (_m *Collection) GetIndexes(ctx context.Context) ([]client.IndexDescription, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetIndexes")
	}

	var r0 []client.IndexDescription
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]client.IndexDescription, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []client.IndexDescription); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]client.IndexDescription)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Collection_GetIndexes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetIndexes'
type Collection_GetIndexes_Call struct {
	*mock.Call
}

// GetIndexes is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Collection_Expecter) GetIndexes(ctx interface{}) *Collection_GetIndexes_Call {
	return &Collection_GetIndexes_Call{Call: _e.mock.On("GetIndexes", ctx)}
}

func (_c *Collection_GetIndexes_Call) Run(run func(ctx context.Context)) *Collection_GetIndexes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Collection_GetIndexes_Call) Return(_a0 []client.IndexDescription, _a1 error) *Collection_GetIndexes_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Collection_GetIndexes_Call) RunAndReturn(run func(context.Context) ([]client.IndexDescription, error)) *Collection_GetIndexes_Call {
	_c.Call.Return(run)
	return _c
}

// ID provides a mock function with given fields:
func (_m *Collection) ID() uint32 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ID")
	}

	var r0 uint32
	if rf, ok := ret.Get(0).(func() uint32); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint32)
	}

	return r0
}

// Collection_ID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ID'
type Collection_ID_Call struct {
	*mock.Call
}

// ID is a helper method to define mock.On call
func (_e *Collection_Expecter) ID() *Collection_ID_Call {
	return &Collection_ID_Call{Call: _e.mock.On("ID")}
}

func (_c *Collection_ID_Call) Run(run func()) *Collection_ID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Collection_ID_Call) Return(_a0 uint32) *Collection_ID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Collection_ID_Call) RunAndReturn(run func() uint32) *Collection_ID_Call {
	_c.Call.Return(run)
	return _c
}

// Name provides a mock function with given fields:
func (_m *Collection) Name() immutable.Option[string] {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Name")
	}

	var r0 immutable.Option[string]
	if rf, ok := ret.Get(0).(func() immutable.Option[string]); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(immutable.Option[string])
	}

	return r0
}

// Collection_Name_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Name'
type Collection_Name_Call struct {
	*mock.Call
}

// Name is a helper method to define mock.On call
func (_e *Collection_Expecter) Name() *Collection_Name_Call {
	return &Collection_Name_Call{Call: _e.mock.On("Name")}
}

func (_c *Collection_Name_Call) Run(run func()) *Collection_Name_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Collection_Name_Call) Return(_a0 immutable.Option[string]) *Collection_Name_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Collection_Name_Call) RunAndReturn(run func() immutable.Option[string]) *Collection_Name_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function with given fields: ctx, doc
func (_m *Collection) Save(ctx context.Context, doc *client.Document) error {
	ret := _m.Called(ctx, doc)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *client.Document) error); ok {
		r0 = rf(ctx, doc)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Collection_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type Collection_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - ctx context.Context
//   - doc *client.Document
func (_e *Collection_Expecter) Save(ctx interface{}, doc interface{}) *Collection_Save_Call {
	return &Collection_Save_Call{Call: _e.mock.On("Save", ctx, doc)}
}

func (_c *Collection_Save_Call) Run(run func(ctx context.Context, doc *client.Document)) *Collection_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*client.Document))
	})
	return _c
}

func (_c *Collection_Save_Call) Return(_a0 error) *Collection_Save_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Collection_Save_Call) RunAndReturn(run func(context.Context, *client.Document) error) *Collection_Save_Call {
	_c.Call.Return(run)
	return _c
}

// Schema provides a mock function with given fields:
func (_m *Collection) Schema() client.SchemaDescription {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Schema")
	}

	var r0 client.SchemaDescription
	if rf, ok := ret.Get(0).(func() client.SchemaDescription); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(client.SchemaDescription)
	}

	return r0
}

// Collection_Schema_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Schema'
type Collection_Schema_Call struct {
	*mock.Call
}

// Schema is a helper method to define mock.On call
func (_e *Collection_Expecter) Schema() *Collection_Schema_Call {
	return &Collection_Schema_Call{Call: _e.mock.On("Schema")}
}

func (_c *Collection_Schema_Call) Run(run func()) *Collection_Schema_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Collection_Schema_Call) Return(_a0 client.SchemaDescription) *Collection_Schema_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Collection_Schema_Call) RunAndReturn(run func() client.SchemaDescription) *Collection_Schema_Call {
	_c.Call.Return(run)
	return _c
}

// SchemaRoot provides a mock function with given fields:
func (_m *Collection) SchemaRoot() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for SchemaRoot")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Collection_SchemaRoot_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SchemaRoot'
type Collection_SchemaRoot_Call struct {
	*mock.Call
}

// SchemaRoot is a helper method to define mock.On call
func (_e *Collection_Expecter) SchemaRoot() *Collection_SchemaRoot_Call {
	return &Collection_SchemaRoot_Call{Call: _e.mock.On("SchemaRoot")}
}

func (_c *Collection_SchemaRoot_Call) Run(run func()) *Collection_SchemaRoot_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Collection_SchemaRoot_Call) Return(_a0 string) *Collection_SchemaRoot_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Collection_SchemaRoot_Call) RunAndReturn(run func() string) *Collection_SchemaRoot_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, docs
func (_m *Collection) Update(ctx context.Context, docs *client.Document) error {
	ret := _m.Called(ctx, docs)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *client.Document) error); ok {
		r0 = rf(ctx, docs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Collection_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type Collection_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - docs *client.Document
func (_e *Collection_Expecter) Update(ctx interface{}, docs interface{}) *Collection_Update_Call {
	return &Collection_Update_Call{Call: _e.mock.On("Update", ctx, docs)}
}

func (_c *Collection_Update_Call) Run(run func(ctx context.Context, docs *client.Document)) *Collection_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*client.Document))
	})
	return _c
}

func (_c *Collection_Update_Call) Return(_a0 error) *Collection_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Collection_Update_Call) RunAndReturn(run func(context.Context, *client.Document) error) *Collection_Update_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateWithFilter provides a mock function with given fields: ctx, filter, updater
func (_m *Collection) UpdateWithFilter(ctx context.Context, filter interface{}, updater string) (*client.UpdateResult, error) {
	ret := _m.Called(ctx, filter, updater)

	if len(ret) == 0 {
		panic("no return value specified for UpdateWithFilter")
	}

	var r0 *client.UpdateResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, string) (*client.UpdateResult, error)); ok {
		return rf(ctx, filter, updater)
	}
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, string) *client.UpdateResult); ok {
		r0 = rf(ctx, filter, updater)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.UpdateResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, interface{}, string) error); ok {
		r1 = rf(ctx, filter, updater)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Collection_UpdateWithFilter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateWithFilter'
type Collection_UpdateWithFilter_Call struct {
	*mock.Call
}

// UpdateWithFilter is a helper method to define mock.On call
//   - ctx context.Context
//   - filter interface{}
//   - updater string
func (_e *Collection_Expecter) UpdateWithFilter(ctx interface{}, filter interface{}, updater interface{}) *Collection_UpdateWithFilter_Call {
	return &Collection_UpdateWithFilter_Call{Call: _e.mock.On("UpdateWithFilter", ctx, filter, updater)}
}

func (_c *Collection_UpdateWithFilter_Call) Run(run func(ctx context.Context, filter interface{}, updater string)) *Collection_UpdateWithFilter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(interface{}), args[2].(string))
	})
	return _c
}

func (_c *Collection_UpdateWithFilter_Call) Return(_a0 *client.UpdateResult, _a1 error) *Collection_UpdateWithFilter_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Collection_UpdateWithFilter_Call) RunAndReturn(run func(context.Context, interface{}, string) (*client.UpdateResult, error)) *Collection_UpdateWithFilter_Call {
	_c.Call.Return(run)
	return _c
}

// NewCollection creates a new instance of Collection. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCollection(t interface {
	mock.TestingT
	Cleanup(func())
}) *Collection {
	mock := &Collection{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
